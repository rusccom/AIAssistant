import prisma from '../db/prisma';
import openaiService from './openai.service'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å

interface SearchResult {
  id: number;
  title: string;
  description?: string;
  price?: number;
  sku?: string;
  type: 'product' | 'variant';
  similarity: number;
  productId?: number;
}

class SemanticSearchService {
  // –ò–∑–º–µ–Ω–∏–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—É: hostname –≤–º–µ—Å—Ç–æ domainId
  async searchProducts(query: string, hostname: string, limit: number = 5): Promise<SearchResult[]> {
    try {
      console.log(`üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: "${query}" –¥–ª—è –¥–æ–º–µ–Ω–∞ ${hostname}`);

      // 1. –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–µ–Ω –ø–æ hostname
      const domain = await prisma.domain.findFirst({
        where: { hostname: hostname }
      });

      if (!domain) {
        console.log(`‚ùå –î–æ–º–µ–Ω ${hostname} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return [];
      }

      const domainId = domain.id;
      console.log(`üåê –ù–∞–π–¥–µ–Ω –¥–æ–º–µ–Ω: ${hostname} (ID: ${domainId})`);

      // 2. –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const queryEmbedding = await openaiService.createEmbedding(query);
      const queryVector = '[' + queryEmbedding.join(',') + ']';

      console.log('üìä –ü–æ–∏—Å–∫ —Å HNSW –∏–Ω–¥–µ–∫—Å–∞–º–∏ (embedding)...');

      // 3. –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pgvector –∏ HNSW –∏–Ω–¥–µ–∫—Å–æ–≤
      const productResults = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        description: string | null;
        distance: number;
      }>>`
        SELECT 
          p.id,
          p.title,
          p.description,
          (p.embedding <=> ${queryVector}::vector) as distance
        FROM "Product" p
        WHERE p.embedding IS NOT NULL 
          AND p."domainId" = ${domainId}
        ORDER BY p.embedding <=> ${queryVector}::vector
        LIMIT ${limit * 2};
      `;

      // 4. –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pgvector –∏ HNSW –∏–Ω–¥–µ–∫—Å–æ–≤
      const variantResults = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        price: number;
        sku: string | null;
        distance: number;
        product_id: number;
        product_title: string;
        product_description: string | null;
      }>>`
        SELECT 
          pv.id,
          pv.title,
          pv.price,
          pv.sku,
          (pv.embedding <=> ${queryVector}::vector) as distance,
          p.id as product_id,
          p.title as product_title,
          p.description as product_description
        FROM "ProductVariant" pv
        JOIN "Product" p ON p.id = pv."productId"
        WHERE pv.embedding IS NOT NULL 
          AND p."domainId" = ${domainId}
        ORDER BY pv.embedding <=> ${queryVector}::vector
        LIMIT ${limit * 2};
      `;

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productResults.length}, –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${variantResults.length}`);

      // 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const allResults: SearchResult[] = [
        ...productResults.map(p => ({
          id: p.id,
          title: p.title,
          description: p.description || undefined,
          type: 'product' as const,
          similarity: Math.max(0, 1 - p.distance) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º distance –≤ similarity
        })),
        ...variantResults.map(v => ({
          id: v.id,
          title: `${v.product_title} ${v.title}`,
          description: v.product_description || undefined,
          price: Number(v.price),
          sku: v.sku || undefined,
          type: 'variant' as const,
          similarity: Math.max(0, 1 - v.distance), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º distance –≤ similarity
          productId: v.product_id
        }))
      ];

      // 6. –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
      const filteredResults = this.applyIntelligentFiltering(allResults, query, limit);

      console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${filteredResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏`);
      return filteredResults;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  private applyIntelligentFiltering(results: SearchResult[], query: string, limit: number): SearchResult[] {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ similarity (—É–±—ã–≤–∞–Ω–∏–µ)
    results.sort((a, b) => b.similarity - a.similarity);

    const queryLower = query.toLowerCase();
    
    // –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
    const exactMatches = results.filter(r => 
      r.title.toLowerCase().includes(queryLower)
    );
    
    // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º –∑–∞–ø—Ä–æ—Å–∞
    const queryWords = queryLower.split(' ').filter(word => word.length > 2);
    const wordMatches = results.filter(r => {
      const titleLower = r.title.toLowerCase();
      return queryWords.some(word => titleLower.includes(word));
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –Ω–∞–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let candidateResults: SearchResult[] = [];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ö–æ—Ä–æ—à–∏–º similarity - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–º
    const goodExactMatches = exactMatches.filter(r => r.similarity > 0.4);
    if (goodExactMatches.length > 0) {
      console.log(`üéØ –ù–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º similarity`);
      candidateResults = goodExactMatches;
    }
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º —Å —Ö–æ—Ä–æ—à–∏–º similarity
    else if (wordMatches.filter(r => r.similarity > 0.5).length > 0) {
      console.log(`üìù –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º`);
      candidateResults = wordMatches.filter(r => r.similarity > 0.5);
    }
    // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ö–æ—Ä–æ—à–∏–º similarity
    else if (results.filter(r => r.similarity > 0.4).length > 0) {
      candidateResults = results.filter(r => r.similarity > 0.4);
    }
    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –±–µ—Ä–µ–º —Å –±–∞–∑–æ–≤—ã–º –ø–æ—Ä–æ–≥–æ–º
    else {
      candidateResults = results.filter(r => r.similarity > 0.25);
    }

    // üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if (candidateResults.length > 0) {
      const grouped = this.groupResultsByProduct(candidateResults);
      const firstProduct = grouped[0];
      
      if (firstProduct && firstProduct.variants.length > 1) {
        console.log(`üî• –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç "${firstProduct.title}" –∏–º–µ–µ—Ç ${firstProduct.variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ`);
        return firstProduct.variants.slice(0, limit);
      }
    }

    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return candidateResults.slice(0, limit);
  }

  async generateBotResponse(query: string, results: SearchResult[]): Promise<string> {
    if (results.length === 0) {
      return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.`;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    const groupedProducts = this.groupResultsByProduct(results);
    
    if (groupedProducts.length === 1) {
      // –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä (–≤–æ–∑–º–æ–∂–Ω–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)
      const product = groupedProducts[0];
      
      if (product.variants.length === 1) {
        // –û–¥–∏–Ω —Ç–æ–≤–∞—Ä —Å –æ–¥–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        const item = product.variants[0];
        const price = item.price ? ` —Å—Ç–æ–∏—Ç ${this.formatPrice(item.price)}` : '';
        const sku = item.sku ? ` (–∞—Ä—Ç–∏–∫—É–ª: ${item.sku})` : '';
        return `${item.title}${price}${sku}.`;
      } else {
        // –û–¥–∏–Ω —Ç–æ–≤–∞—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        const mainTitle = product.title;
        const variantList = product.variants.map((variant, index) => {
          const price = variant.price ? ` - ${this.formatPrice(variant.price)}` : '';
          const sku = variant.sku ? ` (${variant.sku})` : '';
          return `${index + 1}. ${variant.title}${price}${sku}`;
        }).join('\n');
        
        return `–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä "${mainTitle}" –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:\n${variantList}`;
      }
    }

    // –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const itemList = groupedProducts.map((product, index) => {
      const bestVariant = product.variants[0]; // –ë–µ—Ä–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞
      const price = bestVariant.price ? ` - ${this.formatPrice(bestVariant.price)}` : '';
      const sku = bestVariant.sku ? ` (${bestVariant.sku})` : '';
      const variantInfo = product.variants.length > 1 ? ` (${product.variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)` : '';
      return `${index + 1}. ${product.title}${price}${sku}${variantInfo}`;
    }).join('\n');

    return `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":\n${itemList}`;
  }

  private groupResultsByProduct(results: SearchResult[]): Array<{title: string, variants: SearchResult[]}> {
    const productMap = new Map<string, SearchResult[]>();
    
    for (const result of results) {
      let productKey: string;
      let productTitle: string;
      
      if (result.type === 'product') {
        productKey = `product_${result.id}`;
        productTitle = result.title;
      } else {
        // –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ productId
        productKey = `product_${result.productId}`;
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ title –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—É–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
        const parts = result.title.split(' ');
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 —Å–ª–æ–≤–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        productTitle = parts.slice(0, Math.min(3, parts.length - 1)).join(' ');
      }
      
      if (!productMap.has(productKey)) {
        productMap.set(productKey, []);
      }
      productMap.get(productKey)!.push(result);
    }
    
    return Array.from(productMap.entries()).map(([key, variants]) => ({
      title: variants[0].type === 'product' ? variants[0].title : this.extractProductTitle(variants[0]),
      variants: variants.sort((a, b) => b.similarity - a.similarity)
    }));
  }

  private extractProductTitle(variantResult: SearchResult): string {
    // –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ title
    const parts = variantResult.title.split(' ');
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–∏–ø–∞ "–ß–µ—Ä–Ω—ã–µ", "128GB" –∏ —Ç.–¥.)
    return parts.slice(0, -1).join(' ');
  }

  private formatPrice(price: number): string {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB'
    }).format(price);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö embeddings (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ hostname)
  async generateMissingEmbeddings(hostname?: string): Promise<void> {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö embedding...');

    try {
      let domainId: string | undefined;

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω hostname, –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–æ–º–µ–Ω
      if (hostname) {
        const domain = await prisma.domain.findFirst({
          where: { hostname: hostname }
        });
        
        if (!domain) {
          console.log(`‚ùå –î–æ–º–µ–Ω ${hostname} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }
        
        domainId = domain.id;
        console.log(`üåê –†–∞–±–æ—Ç–∞–µ–º —Å –¥–æ–º–µ–Ω–æ–º: ${hostname} (ID: ${domainId})`);
      }

      // –ù–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ embedding
      const products = domainId
        ? await prisma.$queryRaw<Array<{ id: number; title: string; description: string | null }>>`
            SELECT id, title, description FROM "Product" 
            WHERE embedding IS NULL AND "domainId" = ${domainId}
          `
        : await prisma.$queryRaw<Array<{ id: number; title: string; description: string | null }>>`
            SELECT id, title, description FROM "Product" 
            WHERE embedding IS NULL
          `;

      for (const product of products) {
        const text = `${product.title} ${product.description || ''}`.trim();
        const embedding = await openaiService.createEmbedding(text);
        const embeddingVector = '[' + embedding.join(',') + ']';
        
        await prisma.$queryRaw`
          UPDATE "Product" 
          SET embedding = ${embeddingVector}::vector 
          WHERE id = ${product.id}
        `;
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${product.title}`);
      }

      // –ù–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ embedding
      const variants = domainId
        ? await prisma.$queryRaw<Array<{
            id: number;
            title: string;
            product_title: string;
            product_description: string | null;
          }>>`
            SELECT pv.id, pv.title, p.title as product_title, p.description as product_description
            FROM "ProductVariant" pv
            JOIN "Product" p ON p.id = pv."productId"
            WHERE pv.embedding IS NULL AND p."domainId" = ${domainId}
          `
        : await prisma.$queryRaw<Array<{
            id: number;
            title: string;
            product_title: string;
            product_description: string | null;
          }>>`
            SELECT pv.id, pv.title, p.title as product_title, p.description as product_description
            FROM "ProductVariant" pv
            JOIN "Product" p ON p.id = pv."productId"
            WHERE pv.embedding IS NULL
          `;

      for (const variant of variants) {
        const text = `${variant.product_title} ${variant.title} ${variant.product_description || ''}`.trim();
        const embedding = await openaiService.createEmbedding(text);
        const embeddingVector = '[' + embedding.join(',') + ']';
        
        await prisma.$queryRaw`
          UPDATE "ProductVariant" 
          SET embedding = ${embeddingVector}::vector 
          WHERE id = ${variant.id}
        `;
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω embedding –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${variant.product_title} ${variant.title}`);
      }

      console.log('‚úÖ –í—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ embedding —Å–æ–∑–¥–∞–Ω—ã');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embedding:', error);
      throw error;
    }
  }
}

export const semanticSearchService = new SemanticSearchService(); 