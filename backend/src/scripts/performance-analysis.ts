import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';
import openaiService from '../services/openai.service';

async function performanceAnalysis() {
  console.log('‚ö° –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...\n');

  try {
    const testQuery = 'iPhone';
    const hostname = 'localhost';
    const iterations = 5;

    // 1. –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–µ–Ω (–æ–¥–∏–Ω —Ä–∞–∑)
    const domain = await prisma.domain.findFirst({
      where: { hostname: hostname }
    });

    if (!domain) {
      console.log('‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üåê –î–æ–º–µ–Ω: ${hostname} (ID: ${domain.id})\n`);

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('üìä === –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (5 –∏—Ç–µ—Ä–∞—Ü–∏–π) ===\n');

    const embeddingTimes: number[] = [];
    const searchTimes: number[] = [];
    const totalTimes: number[] = [];

    for (let i = 0; i < iterations; i++) {
      console.log(`üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}:`);

      // –û–±—â–µ–µ –≤—Ä–µ–º—è
      const totalStart = Date.now();

      // 1. –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è embedding
      const embeddingStart = Date.now();
      const queryEmbedding = await openaiService.createEmbedding(testQuery);
      const embeddingTime = Date.now() - embeddingStart;
      embeddingTimes.push(embeddingTime);

      const queryVector = '[' + queryEmbedding.join(',') + ']';

      // 2. –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î (—Ç–æ–ª—å–∫–æ SQL –∑–∞–ø—Ä–æ—Å—ã)
      const searchStart = Date.now();

      // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
      const productResults = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        description: string | null;
        distance: number;
      }>>`
        SELECT 
          p.id,
          p.title,
          p.description,
          (p.embedding_small <=> ${queryVector}::vector) as distance
        FROM "Product" p
        WHERE p.embedding_small IS NOT NULL 
          AND p."domainId" = ${domain.id}
        ORDER BY p.embedding_small <=> ${queryVector}::vector
        LIMIT 10;
      `;

      // –ü–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const variantResults = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        price: number;
        sku: string | null;
        distance: number;
        product_id: number;
        product_title: string;
        product_description: string | null;
      }>>`
        SELECT 
          pv.id,
          pv.title,
          pv.price,
          pv.sku,
          (pv.embedding_small <=> ${queryVector}::vector) as distance,
          p.id as product_id,
          p.title as product_title,
          p.description as product_description
        FROM "ProductVariant" pv
        JOIN "Product" p ON p.id = pv."productId"
        WHERE pv.embedding_small IS NOT NULL 
          AND p."domainId" = ${domain.id}
        ORDER BY pv.embedding_small <=> ${queryVector}::vector
        LIMIT 10;
      `;

      const searchTime = Date.now() - searchStart;
      searchTimes.push(searchTime);

      const totalTime = Date.now() - totalStart;
      totalTimes.push(totalTime);

      console.log(`   ü§ñ OpenAI embedding: ${embeddingTime}ms`);
      console.log(`   üîç –ü–æ–∏—Å–∫ –≤ –ë–î: ${searchTime}ms`);
      console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ: ${productResults.length} —Ç–æ–≤–∞—Ä–æ–≤, ${variantResults.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
      console.log(`   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms\n`);
    }

    // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===\n');

    const avgEmbedding = embeddingTimes.reduce((a, b) => a + b, 0) / embeddingTimes.length;
    const avgSearch = searchTimes.reduce((a, b) => a + b, 0) / searchTimes.length;
    const avgTotal = totalTimes.reduce((a, b) => a + b, 0) / totalTimes.length;

    console.log(`ü§ñ OpenAI Embedding API:`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${avgEmbedding.toFixed(1)}ms`);
    console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...embeddingTimes)}-${Math.max(...embeddingTimes)}ms`);
    console.log(`   –î–æ–ª—è: ${((avgEmbedding / avgTotal) * 100).toFixed(1)}%\n`);

    console.log(`üîç –ü–æ–∏—Å–∫ –≤ PostgreSQL (—Å HNSW):`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${avgSearch.toFixed(1)}ms`);
    console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...searchTimes)}-${Math.max(...searchTimes)}ms`);
    console.log(`   –î–æ–ª—è: ${((avgSearch / avgTotal) * 100).toFixed(1)}%\n`);

    console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è:`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${avgTotal.toFixed(1)}ms`);
    console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...totalTimes)}-${Math.max(...totalTimes)}ms\n`);

    // 4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    console.log('üÜö === –°–†–ê–í–ù–ï–ù–ò–ï: –ü–û–ò–°–ö –ë–ï–ó –ò–ù–î–ï–ö–°–û–í ===\n');

    // –°–æ–∑–¥–∞–µ–º embedding –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const testEmbedding = await openaiService.createEmbedding(testQuery);
    const testVector = '[' + testEmbedding.join(',') + ']';

    const withoutIndexTimes: number[] = [];

    for (let i = 0; i < iterations; i++) {
      const start = Date.now();

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ (–ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
      const results = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        distance: number;
      }>>`
        SELECT 
          p.id,
          p.title,
          (p.embedding_small <=> ${testVector}::vector) as distance
        FROM "Product" p
        WHERE p.embedding_small IS NOT NULL 
          AND p."domainId" = ${domain.id}
        ORDER BY distance
        LIMIT 5;
      `;

      const time = Date.now() - start;
      withoutIndexTimes.push(time);
    }

    const avgWithoutIndex = withoutIndexTimes.reduce((a, b) => a + b, 0) / withoutIndexTimes.length;

    console.log(`üìä –° HNSW –∏–Ω–¥–µ–∫—Å–∞–º–∏: ${avgSearch.toFixed(1)}ms`);
    console.log(`üìä –ë–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤: ${avgWithoutIndex.toFixed(1)}ms`);
    console.log(`üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${(avgWithoutIndex / avgSearch).toFixed(1)}x\n`);

    // 5. –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìà === –ü–†–û–ì–ù–û–ó –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø ===\n');

    const currentRecords = 18; // 5 —Ç–æ–≤–∞—Ä–æ–≤ + 13 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    const scenarios = [100, 1000, 10000, 100000];

    console.log('üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ –≤ –ë–î (–±–µ–∑ OpenAI API):');
    console.log(`üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: ${currentRecords} –∑–∞–ø–∏—Å–µ–π = ${avgSearch.toFixed(1)}ms\n`);

    console.log('–° HNSW –∏–Ω–¥–µ–∫—Å–∞–º–∏:');
    scenarios.forEach(records => {
      // HNSW –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏ O(log n)
      const estimated = avgSearch * Math.log(records) / Math.log(currentRecords);
      console.log(`   ${records.toLocaleString()} –∑–∞–ø–∏—Å–µ–π: ~${estimated.toFixed(0)}ms`);
    });

    console.log('\n–ë–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ (–ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫):');
    scenarios.forEach(records => {
      // –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ O(n)
      const estimated = avgWithoutIndex * (records / currentRecords);
      console.log(`   ${records.toLocaleString()} –∑–∞–ø–∏—Å–µ–π: ~${estimated.toFixed(0)}ms`);
    });

    // 6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('\nüí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===\n');

    if (avgEmbedding > avgSearch * 5) {
      console.log('ü§ñ OpenAI API - –æ—Å–Ω–æ–≤–Ω–æ–π "bottleneck" (>80% –≤—Ä–µ–º–µ–Ω–∏):');
      console.log('   ‚úÖ –ö–µ—à–∏—Ä—É–π—Ç–µ embeddings –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
      console.log('   ‚úÖ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ batch –æ–±—Ä–∞–±–æ—Ç–∫—É');
      console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ embedding –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n');
    }

    if (currentRecords < 1000) {
      console.log('üìä –ú–∞–ª–µ–Ω—å–∫–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö (<1000 –∑–∞–ø–∏—Å–µ–π):');
      console.log('   ‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º–∏ —Å–µ–π—á–∞—Å');
      console.log('   ‚úÖ –ù–æ –æ–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('   ‚úÖ –ì–æ—Ç–æ–≤—ã –∫ —Ä–æ—Å—Ç—É –¥–∞–Ω–Ω—ã—Ö\n');
    }

    console.log('üîß –¢–µ–∫—É—â–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:');
    console.log(`   ‚úÖ HNSW –∏–Ω–¥–µ–∫—Å—ã: ${(avgWithoutIndex / avgSearch).toFixed(1)}x —É—Å–∫–æ—Ä–µ–Ω–∏–µ`);
    console.log(`   ‚úÖ text-embedding-3-small: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤`);
    console.log(`   ‚úÖ Hostname-based –¥–æ–º–µ–Ω—ã: –±—ã—Å—Ç—Ä—ã–π lookup`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

performanceAnalysis(); 