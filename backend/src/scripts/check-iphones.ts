import prisma from '../db/prisma';

async function checkIphones() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º iPhone —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    const iphones = await prisma.product.findMany({
      where: {
        OR: [
          { title: { contains: 'iPhone', mode: 'insensitive' } },
          { title: { contains: '–∞–π—Ñ–æ–Ω', mode: 'insensitive' } }
        ]
      },
      include: {
        variants: true
      }
    });

    console.log(`üì± –ù–∞–π–¥–µ–Ω–æ iPhone —Ç–æ–≤–∞—Ä–æ–≤: ${iphones.length}\n`);
    
    iphones.forEach((product, index) => {
      console.log(`${index + 1}. ${product.title} (ID: ${product.id})`);
      console.log(`   –î–æ–º–µ–Ω ID: ${product.domainId || '–Ω–µ –∑–∞–¥–∞–Ω'}`);
      console.log(`   –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${product.variants.length}`);
      
      product.variants.forEach((variant, vIndex) => {
        console.log(`   ${vIndex + 1}. ${variant.title} - $${(variant.price / 100).toFixed(2)} (ID: ${variant.id})`);
        console.log(`      SKU: ${variant.sku || '–Ω–µ –∑–∞–¥–∞–Ω'}`);
      });
      console.log('');
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const allProducts = await prisma.product.count();
    const allVariants = await prisma.productVariant.count();
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts}`);
    console.log(`   –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${allVariants}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkIphones(); 