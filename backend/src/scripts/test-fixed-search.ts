import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import { semanticSearchService } from '../services/semantic-search.service';
import { executeSearchProducts } from '../bot-functions/search-products';

async function testFixedSearch() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞...\n');

  try {
    // 1. –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ semantic search
    console.log('üìä === –¢–ï–°–¢ SEMANTIC SEARCH ===');
    
    const testQueries = ['iPhone', '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256', '–∫–æ—Ñ–µ', '–Ω–∞—É—à–Ω–∏–∫–∏ bluetooth'];
    
    for (const query of testQueries) {
      console.log(`\nüîç –ó–∞–ø—Ä–æ—Å: "${query}"`);
      const startTime = Date.now();
      
      const results = await semanticSearchService.searchProducts(query, 'localhost', 5);
      
      const searchTime = Date.now() - startTime;
      console.log(`‚ö° –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${searchTime}ms`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
      
      if (results.length > 0) {
        console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        results.forEach((result, index) => {
          const similarity = (result.similarity * 100).toFixed(1);
          const price = result.price ? ` - ${result.price}‚ÇΩ` : '';
          const type = result.type === 'variant' ? ' [–≤–∞—Ä–∏–∞–Ω—Ç]' : ' [—Ç–æ–≤–∞—Ä]';
          console.log(`   ${index + 1}. ${result.title}${price} (${similarity}%)${type}`);
        });
      } else {
        console.log('   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }

    // 2. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ bot function
    console.log('\nü§ñ === –¢–ï–°–¢ BOT FUNCTION ===');
    
    const botTestQueries = ['iPhone', '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256–≥–±', '–∫–æ—Ñ–µ —ç—Å–ø—Ä–µ—Å—Å–æ', '–Ω–∞—É—à–Ω–∏–∫–∏'];
    
    for (const query of botTestQueries) {
      console.log(`\nüîç Bot Function –∑–∞–ø—Ä–æ—Å: "${query}"`);
      
      const result = await executeSearchProducts({ query }, 'localhost');
      
      if (result.success) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        console.log(`ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${result.response}"`);
        
        if (result.products.length > 0) {
          console.log('üì¶ –¢–æ–≤–∞—Ä—ã:');
          result.products.forEach((product, index) => {
            const similarity = (product.similarity * 100).toFixed(1);
            const price = product.price ? ` - ${product.price}‚ÇΩ` : '';
            console.log(`   ${index + 1}. ${product.title}${price} (${similarity}%)`);
          });
        }
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        console.log(`ü§ñ –û—Ç–≤–µ—Ç: "${result.response}"`);
      }
    }

    // 3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å HNSW –∏–Ω–¥–µ–∫—Å–∞–º–∏
    console.log('\n‚ö° === –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    
    const performanceQuery = 'iPhone';
    const iterations = 10;
    const times: number[] = [];
    
    console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º "${performanceQuery}" (${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π):`);
    
    for (let i = 0; i < iterations; i++) {
      const start = Date.now();
      await semanticSearchService.searchProducts(performanceQuery, 'localhost', 5);
      const end = Date.now();
      times.push(end - start);
    }
    
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);
    
    console.log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(1)}ms`);
    console.log(`üöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${minTime}ms`);
    console.log(`üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${maxTime}ms`);
    console.log(`üìà –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞: ${times.join(', ')}ms`);

    // 4. –¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ iPhone
    console.log('\nüéØ === –¢–ï–°–¢ –°–ü–ï–¶–ò–§–ò–ß–ù–û–°–¢–ò iPhone ===');
    
    const iPhoneTests = [
      {
        query: '–∞–π—Ñ–æ–Ω',
        expected: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã iPhone'
      },
      {
        query: '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π',
        expected: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–µ iPhone'
      },
      {
        query: '–∞–π—Ñ–æ–Ω 256',
        expected: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å iPhone –Ω–∞ 256GB'
      },
      {
        query: '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256–≥–±',
        expected: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ—Ä–Ω—ã–π iPhone 256GB'
      }
    ];

    for (const test of iPhoneTests) {
      console.log(`\nüîç –ó–∞–ø—Ä–æ—Å: "${test.query}"`);
      console.log(`üéØ –û–∂–∏–¥–∞–Ω–∏–µ: ${test.expected}`);
      
      const results = await semanticSearchService.searchProducts(test.query, 'localhost', 5);
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
      
      if (results.length > 0) {
        results.forEach((result, index) => {
          const similarity = (result.similarity * 100).toFixed(1);
          const type = result.type === 'variant' ? ' [–≤–∞—Ä–∏–∞–Ω—Ç]' : ' [—Ç–æ–≤–∞—Ä]';
          console.log(`   ${index + 1}. ${result.title} (${similarity}%)${type}`);
        });

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const hasIPhone = results.some(r => r.title.toLowerCase().includes('iphone'));
        const hasBlack = results.some(r => r.title.toLowerCase().includes('black') || r.title.toLowerCase().includes('—á–µ—Ä–Ω'));
        const has256 = results.some(r => r.title.toLowerCase().includes('256'));
        
        console.log(`   üìä –ê–Ω–∞–ª–∏–∑: iPhone=${hasIPhone}, –ß–µ—Ä–Ω—ã–π=${hasBlack}, 256GB=${has256}`);
      } else {
        console.log('   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }

    console.log('\nüéâ === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log('‚úÖ –ü–æ–∏—Å–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º hostname —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚ö° HNSW –∏–Ω–¥–µ–∫—Å—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    console.log('üéØ –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—ã—Å–æ–∫–æ–µ');
    console.log('ü§ñ Bot function –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –±–æ—Ç–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testFixedSearch(); 