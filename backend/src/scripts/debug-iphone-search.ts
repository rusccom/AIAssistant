import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';
import { semanticSearchService } from '../services/semantic-search.service';

async function debugIphoneSearch() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê iPhone –ü–û–ò–°–ö–ê\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ iPhone —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ
    console.log('üìä === –®–ê–ì 1: –í–°–ï iPhone –í –ë–ê–ó–ï ===');
    
    const allIphones = await prisma.product.findMany({
      where: {
        OR: [
          { title: { contains: 'iPhone', mode: 'insensitive' } },
          { title: { contains: '–∞–π—Ñ–æ–Ω', mode: 'insensitive' } }
        ]
      },
      include: {
        variants: true,
        domain: true
      }
    });

    console.log(`üì± –í—Å–µ–≥–æ iPhone —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${allIphones.length}\n`);
    
    allIphones.forEach((product, index) => {
      console.log(`${index + 1}. "${product.title}" (ID: ${product.id})`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${product.status}`);
      console.log(`   –î–æ–º–µ–Ω: ${product.domain?.hostname || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}`);
      console.log(`   Embedding: ${product.embedding.length > 0 ? '‚úÖ –µ—Å—Ç—å' : '‚ùå –Ω–µ—Ç'} (${product.embedding.length} dims)`);
      console.log(`   –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${product.variants.length}`);
      
      product.variants.forEach((variant, vIndex) => {
        console.log(`   ${vIndex + 1}. "${variant.title}" - $${(variant.price / 100).toFixed(2)}`);
        console.log(`      SKU: ${variant.sku || '–Ω–µ –∑–∞–¥–∞–Ω'}`);
        console.log(`      Embedding: ${variant.embedding.length > 0 ? '‚úÖ –µ—Å—Ç—å' : '‚ùå –Ω–µ—Ç'} (${variant.embedding.length} dims)`);
      });
      console.log('');
    });

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    console.log('üîç === –®–ê–ì 2: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö ===');
    
    const searchQueries = [
      '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256',
      'iPhone 15',
      'iPhone',
      '–∞–π—Ñ–æ–Ω'
    ];

    for (const query of searchQueries) {
      console.log(`\nüîé –ü–æ–∏—Å–∫: "${query}"`);
      try {
        const searchResult = await semanticSearchService.searchProductsForBot(query, 'localhost');
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${searchResult.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤`);
        console.log(`   –¢–∏–ø –ø–æ–∏—Å–∫–∞: ${searchResult.searchType}`);
        console.log(`   –û—Ç–≤–µ—Ç: "${searchResult.response}"`);
        
        if (searchResult.products && searchResult.products.length > 0) {
          searchResult.products.forEach((product: any, idx: number) => {
            console.log(`   ${idx + 1}. ${product.productTitle} ${product.variantTitle} - $${(product.price / 100).toFixed(2)}`);
          });
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error}`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω—ã
    console.log('\nüåê === –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –î–û–ú–ï–ù–û–í ===');
    
    const localhost = await prisma.domain.findUnique({
      where: { hostname: 'localhost' },
      include: {
        products: {
          where: {
            OR: [
              { title: { contains: 'iPhone', mode: 'insensitive' } },
              { title: { contains: '–∞–π—Ñ–æ–Ω', mode: 'insensitive' } }
            ]
          },
          include: { variants: true }
        }
      }
    });

    if (localhost) {
      console.log(`üìç –î–æ–º–µ–Ω localhost –Ω–∞–π–¥–µ–Ω (ID: ${localhost.id})`);
      console.log(`üì± iPhone —Ç–æ–≤–∞—Ä–æ–≤ –≤ localhost: ${localhost.products.length}`);
      
      localhost.products.forEach((product, index) => {
        console.log(`   ${index + 1}. ${product.title} (${product.variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)`);
      });
    } else {
      console.log('‚ùå –î–æ–º–µ–Ω localhost –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugIphoneSearch(); 