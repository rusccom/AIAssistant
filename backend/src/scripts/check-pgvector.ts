import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function checkPgvectorSupport() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É pgvector –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
    console.log('üìä === –®–ê–ì 1: –í–ï–†–°–ò–Ø POSTGRESQL ===');
    const versionResult = await prisma.$queryRaw<Array<{ version: string }>>`SELECT version()`;
    console.log(`PostgreSQL –≤–µ—Ä—Å–∏—è: ${versionResult[0].version}\n`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    console.log('üß© === –®–ê–ì 2: –î–û–°–¢–£–ü–ù–´–ï –†–ê–°–®–ò–†–ï–ù–ò–Ø ===');
    const availableExtensions = await prisma.$queryRaw<Array<{ name: string; comment: string }>>`
      SELECT name, comment 
      FROM pg_available_extensions 
      WHERE name LIKE '%vector%' OR name LIKE '%embed%'
      ORDER BY name;
    `;
    
    if (availableExtensions.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:');
      availableExtensions.forEach(ext => {
        console.log(`   üì¶ ${ext.name}: ${ext.comment}`);
      });
    } else {
      console.log('‚ùå –í–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    console.log('üîß === –®–ê–ì 3: –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –†–ê–°–®–ò–†–ï–ù–ò–Ø ===');
    const installedExtensions = await prisma.$queryRaw<Array<{ extname: string; extversion: string }>>`
      SELECT extname, extversion 
      FROM pg_extension 
      WHERE extname LIKE '%vector%' OR extname LIKE '%embed%';
    `;

    if (installedExtensions.length > 0) {
      console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:');
      installedExtensions.forEach(ext => {
        console.log(`   üéØ ${ext.extname} v${ext.extversion}`);
      });
    } else {
      console.log('‚ùå –í–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
    console.log('');

    // 4. –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pgvector (–µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –ø–æ–∑–≤–æ–ª—è—é—Ç)
    console.log('üöÄ === –®–ê–ì 4: –ü–û–ü–´–¢–ö–ê –£–°–¢–ê–ù–û–í–ö–ò PGVECTOR ===');
    try {
      await prisma.$queryRaw`CREATE EXTENSION IF NOT EXISTS vector`;
      console.log('‚úÖ pgvector —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω/–ø–æ–¥–∫–ª—é—á–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ vector —Ç–∏–ø —Ä–∞–±–æ—Ç–∞–µ—Ç
      const testResult = await prisma.$queryRaw<Array<{ test: string }>>`
        SELECT '[1,2,3]'::vector as test
      `;
      console.log(`‚úÖ vector —Ç–∏–ø —Ä–∞–±–æ—Ç–∞–µ—Ç: ${testResult[0].test}`);
      
    } catch (error: any) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pgvector: ${error.message}`);
      console.log('üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π managed —Å–µ—Ä–≤–∏—Å–∞');
    }
    console.log('');

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ === –®–ê–ì 5: –ü–†–ê–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
    try {
      const userInfo = await prisma.$queryRaw<Array<{ usename: string; usesuper: boolean; usecreatedb: boolean }>>`
        SELECT usename, usesuper, usecreatedb 
        FROM pg_user 
        WHERE usename = current_user;
      `;
      
      const user = userInfo[0];
      console.log(`–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.usename}`);
      console.log(`–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.usesuper ? '‚úÖ' : '‚ùå'}`);
      console.log(`–ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ë–î: ${user.usecreatedb ? '‚úÖ' : '‚ùå'}`);
    } catch (error: any) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${error.message}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkPgvectorSupport(); 