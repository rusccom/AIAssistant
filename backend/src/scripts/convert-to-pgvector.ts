import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function convertToPgvector() {
  console.log('üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Float[] –≤ pgvector...\n');

  try {
    // 1. –í–∫–ª—é—á–∞–µ–º pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    console.log('üì¶ === –®–ê–ì 1: –í–ö–õ–Æ–ß–ï–ù–ò–ï PGVECTOR ===');
    await prisma.$queryRaw`CREATE EXTENSION IF NOT EXISTS vector`;
    console.log('‚úÖ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüìä === –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ò–• –ö–û–õ–û–ù–û–ö ===');
    const productCol = await prisma.$queryRaw<Array<{ data_type: string }>>`
      SELECT data_type 
      FROM information_schema.columns 
      WHERE table_name = 'Product' AND column_name = 'embedding';
    `;
    console.log(`Product embedding —Ç–∏–ø: ${productCol[0]?.data_type}`);

    // 3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüîÑ === –®–ê–ì 3: –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ö–û–õ–û–ù–û–ö ===');
    try {
      await prisma.$queryRaw`ALTER TABLE "Product" RENAME COLUMN "embedding" TO "embedding_old"`;
      console.log('‚úÖ Product.embedding ‚Üí embedding_old');
    } catch (error: any) {
      if (error.message.includes('does not exist')) {
        console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ Product.embedding_old —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }

    try {
      await prisma.$queryRaw`ALTER TABLE "ProductVariant" RENAME COLUMN "embedding" TO "embedding_old"`;
      console.log('‚úÖ ProductVariant.embedding ‚Üí embedding_old');
    } catch (error: any) {
      if (error.message.includes('does not exist')) {
        console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ ProductVariant.embedding_old —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ vector –∫–æ–ª–æ–Ω–∫–∏
    console.log('\n‚ûï === –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï VECTOR –ö–û–õ–û–ù–û–ö ===');
    try {
      await prisma.$queryRaw`ALTER TABLE "Product" ADD COLUMN "embedding" vector(3072)`;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ Product.embedding vector(3072)');
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ Product.embedding —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }

    try {
      await prisma.$queryRaw`ALTER TABLE "ProductVariant" ADD COLUMN "embedding" vector(3072)`;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ ProductVariant.embedding vector(3072)');
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ ProductVariant.embedding —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }

    // 5. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìã === –®–ê–ì 5: –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ===');
    
    // –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const productCount = await prisma.$queryRaw<Array<{ count: bigint }>>`
      SELECT COUNT(*) as count 
      FROM "Product" 
      WHERE "embedding_old" IS NOT NULL 
      AND array_length("embedding_old", 1) = 3072;
    `;
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${productCount[0].count}`);

    const variantCount = await prisma.$queryRaw<Array<{ count: bigint }>>`
      SELECT COUNT(*) as count 
      FROM "ProductVariant" 
      WHERE "embedding_old" IS NOT NULL 
      AND array_length("embedding_old", 1) = 3072;
    `;
    console.log(`–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${variantCount[0].count}`);

    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (Number(productCount[0].count) > 0) {
      await prisma.$queryRaw`
        UPDATE "Product" 
        SET "embedding" = "embedding_old"::vector 
        WHERE "embedding_old" IS NOT NULL 
        AND array_length("embedding_old", 1) = 3072;
      `;
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ Product —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    }

    if (Number(variantCount[0].count) > 0) {
      await prisma.$queryRaw`
        UPDATE "ProductVariant" 
        SET "embedding" = "embedding_old"::vector 
        WHERE "embedding_old" IS NOT NULL 
        AND array_length("embedding_old", 1) = 3072;
      `;
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ ProductVariant —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // 6. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüóëÔ∏è === –®–ê–ì 6: –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –ö–û–õ–û–ù–û–ö ===');
    await prisma.$queryRaw`ALTER TABLE "Product" DROP COLUMN IF EXISTS "embedding_old"`;
    await prisma.$queryRaw`ALTER TABLE "ProductVariant" DROP COLUMN IF EXISTS "embedding_old"`;
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω—ã');

    // 7. –°–æ–∑–¥–∞–µ–º HNSW –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüèóÔ∏è === –®–ê–ì 7: –°–û–ó–î–ê–ù–ò–ï HNSW –ò–ù–î–ï–ö–°–û–í ===');
    
    await prisma.$queryRaw`
      CREATE INDEX IF NOT EXISTS idx_product_embedding_hnsw_cosine 
      ON "Product" USING hnsw (embedding vector_cosine_ops);
    `;
    console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è Product (cosine)');

    await prisma.$queryRaw`
      CREATE INDEX IF NOT EXISTS idx_variant_embedding_hnsw_cosine 
      ON "ProductVariant" USING hnsw (embedding vector_cosine_ops);
    `;
    console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è ProductVariant (cosine)');

    // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    console.log('\nüß™ === –®–ê–ì 8: –¢–ï–°–¢ –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê ===');
    
    const testVector = Array(3072).fill(0).map(() => Math.random());
    const testVectorStr = '[' + testVector.join(',') + ']';

    const testResult = await prisma.$queryRaw<Array<{ id: number; distance: number }>>`
      SELECT id, (embedding <=> ${testVectorStr}::vector) as distance 
      FROM "Product" 
      WHERE embedding IS NOT NULL 
      ORDER BY embedding <=> ${testVectorStr}::vector
      LIMIT 3;
    `;

    if (testResult.length > 0) {
      console.log('‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      testResult.forEach((result, idx) => {
        console.log(`   ${idx + 1}. Product ID ${result.id}, distance: ${result.distance.toFixed(4)}`);
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    console.log('\nüéâ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í PGVECTOR –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! üéâ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

convertToPgvector(); 