#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupDatabaseTools() {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ tools –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    try {
        // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–µ–π—á–∞—Å
        const existingTools = await prisma.tool.findMany({
            include: {
                botConfigurations: {
                    include: {
                        domain: true
                    }
                }
            }
        });

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ tools –≤ –±–∞–∑–µ: ${existingTools.length}`);
        
        if (existingTools.length === 0) {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —á–∏—Å—Ç–∞—è - –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö tools');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å
        existingTools.forEach((tool, index) => {
            console.log(`${index + 1}. ${tool.name} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${tool.botConfigurations.length} –¥–æ–º–µ–Ω–∞—Ö)`);
            tool.botConfigurations.forEach(config => {
                console.log(`   - ${config.domain?.hostname || 'Unknown domain'}`);
            });
        });

        console.log('\n‚ö†Ô∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ tools...');

        // 2. –û—Ç–∫–ª—é—á–∞–µ–º tools –æ—Ç bot configurations
        for (const tool of existingTools) {
            for (const config of tool.botConfigurations) {
                await prisma.botConfiguration.update({
                    where: { id: config.id },
                    data: {
                        tools: {
                            disconnect: { id: tool.id }
                        }
                    }
                });
                console.log(`üîó –û—Ç–∫–ª—é—á–µ–Ω tool ${tool.name} –æ—Ç –¥–æ–º–µ–Ω–∞ ${config.domain?.hostname}`);
            }
        }

        // 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ tools
        const deleteResult = await prisma.tool.deleteMany({});
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ tools: ${deleteResult.count}`);

        console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è bot functions –∏–∑ —Ñ–∞–π–ª–æ–≤.');

    } catch (error: any) {
        console.error('üí• –û—à–∏–±–∫–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

if (require.main === module) {
    cleanupDatabaseTools().catch(console.error);
} 