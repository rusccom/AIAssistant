import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function fixPgvectorManually() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º pgvector –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä—É—á–Ω—É—é...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìä === –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===');
    
    try {
      const productColumns = await prisma.$queryRaw<Array<{ column_name: string; data_type: string }>>`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'Product' AND column_name = 'embedding';
      `;
      
      console.log('Product embedding –∫–æ–ª–æ–Ω–∫–∞:', productColumns[0] || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫: ${error.message}`);
    }

    // 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    console.log('\nüóëÔ∏è === –®–ê–ì 2: –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –ò–ù–î–ï–ö–°–û–í ===');
    
    const indicesToDrop = [
      'idx_product_embedding_cosine',
      'idx_variant_embedding_cosine', 
      'idx_product_embedding_l2',
      'idx_variant_embedding_l2'
    ];

    for (const indexName of indicesToDrop) {
      try {
        await prisma.$queryRaw`DROP INDEX IF EXISTS ${indexName}`;
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –∏–Ω–¥–µ–∫—Å: ${indexName}`);
      } catch (error: any) {
        console.log(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å ${indexName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω: ${error.message}`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HNSW
    console.log('\nüîç === –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò HNSW ===');
    
    try {
      const hnsw = await prisma.$queryRaw<Array<{ name: string }>>`
        SELECT amname as name 
        FROM pg_am 
        WHERE amname = 'hnsw';
      `;
      
      if (hnsw.length > 0) {
        console.log('‚úÖ HNSW –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.log('‚ùå HNSW –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–µ–∫—Å—ã');
      }
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HNSW: ${error.message}`);
    }

    // 4. –°–æ–∑–¥–∞–µ–º HNSW –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
    console.log('\nüèóÔ∏è === –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï HNSW –ò–ù–î–ï–ö–°–û–í ===');
    
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      await prisma.$queryRaw`
        CREATE INDEX IF NOT EXISTS idx_product_embedding_hnsw_cosine 
        ON "Product" USING hnsw (embedding vector_cosine_ops);
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è Product (cosine)');

      await prisma.$queryRaw`
        CREATE INDEX IF NOT EXISTS idx_variant_embedding_hnsw_cosine 
        ON "ProductVariant" USING hnsw (embedding vector_cosine_ops);
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è ProductVariant (cosine)');

    } catch (error: any) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HNSW –∏–Ω–¥–µ–∫—Å—ã: ${error.message}`);
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ B-tree –∏–Ω–¥–µ–∫—Å—ã
      console.log('\nüìù –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∫–∞–∫ fallback...');
      try {
        await prisma.$queryRaw`
          CREATE INDEX IF NOT EXISTS idx_product_embedding_btree 
          ON "Product" (embedding);
        `;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω B-tree –∏–Ω–¥–µ–∫—Å –¥–ª—è Product');

        await prisma.$queryRaw`
          CREATE INDEX IF NOT EXISTS idx_variant_embedding_btree 
          ON "ProductVariant" (embedding);
        `;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω B-tree –∏–Ω–¥–µ–∫—Å –¥–ª—è ProductVariant');
      } catch (fallbackError: any) {
        console.log(`‚ùå –î–∞–∂–µ –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏—Å—å: ${fallbackError.message}`);
      }
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    console.log('\nüß™ === –®–ê–ì 5: –¢–ï–°–¢ –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê ===');
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
      const testVector = Array(3072).fill(0).map(() => Math.random());
      const testVectorStr = '[' + testVector.join(',') + ']';

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      const testResult = await prisma.$queryRaw<Array<{ distance: number }>>`
        SELECT (embedding <=> ${testVectorStr}::vector) as distance 
        FROM "Product" 
        WHERE embedding IS NOT NULL 
        LIMIT 1;
      `;

      if (testResult.length > 0) {
        console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${testResult[0].distance}`);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
      }

    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixPgvectorManually(); 