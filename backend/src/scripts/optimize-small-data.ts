import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function createAdaptiveSearch() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º SQL —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await prisma.$queryRaw`
      CREATE OR REPLACE FUNCTION adaptive_product_search(
        domain_id TEXT,
        query_vector vector(1536),
        search_limit INTEGER DEFAULT 10
      )
      RETURNS TABLE(
        id INTEGER,
        title TEXT,
        description TEXT,
        distance FLOAT
      ) AS $$
      DECLARE
        record_count INTEGER;
      BEGIN
        -- –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞
        SELECT COUNT(*) INTO record_count
        FROM "Product" p
        WHERE p."domainId" = domain_id AND p.embedding_small IS NOT NULL;
        
        -- –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–∞–ª–æ (<100), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        -- –ï—Å–ª–∏ –º–Ω–æ–≥–æ (>=100), –∏—Å–ø–æ–ª—å–∑—É–µ–º HNSW –∏–Ω–¥–µ–∫—Å
        IF record_count < 100 THEN
          -- –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
          RETURN QUERY
          SELECT 
            p.id::INTEGER,
            p.title::TEXT,
            p.description::TEXT,
            (p.embedding_small <=> query_vector)::FLOAT as distance
          FROM "Product" p
          WHERE p."domainId" = domain_id 
            AND p.embedding_small IS NOT NULL
          ORDER BY distance
          LIMIT search_limit;
        ELSE
          -- HNSW –∏–Ω–¥–µ–∫—Å (–±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
          RETURN QUERY
          SELECT 
            p.id::INTEGER,
            p.title::TEXT,
            p.description::TEXT,
            (p.embedding_small <=> query_vector)::FLOAT as distance
          FROM "Product" p
          WHERE p."domainId" = domain_id 
            AND p.embedding_small IS NOT NULL
          ORDER BY p.embedding_small <=> query_vector
          LIMIT search_limit;
        END IF;
      END;
      $$ LANGUAGE plpgsql;
    `;

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è adaptive_product_search');

    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    await prisma.$queryRaw`
      CREATE OR REPLACE FUNCTION adaptive_variant_search(
        domain_id TEXT,
        query_vector vector(1536),
        search_limit INTEGER DEFAULT 10
      )
      RETURNS TABLE(
        id INTEGER,
        title TEXT,
        price DECIMAL,
        sku TEXT,
        distance FLOAT,
        product_id INTEGER,
        product_title TEXT,
        product_description TEXT
      ) AS $$
      DECLARE
        record_count INTEGER;
      BEGIN
        -- –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞
        SELECT COUNT(*) INTO record_count
        FROM "ProductVariant" pv
        JOIN "Product" p ON p.id = pv."productId"
        WHERE p."domainId" = domain_id AND pv.embedding_small IS NOT NULL;
        
        -- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        IF record_count < 100 THEN
          -- –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
          RETURN QUERY
          SELECT 
            pv.id::INTEGER,
            pv.title::TEXT,
            pv.price::DECIMAL,
            pv.sku::TEXT,
            (pv.embedding_small <=> query_vector)::FLOAT as distance,
            p.id::INTEGER as product_id,
            p.title::TEXT as product_title,
            p.description::TEXT as product_description
          FROM "ProductVariant" pv
          JOIN "Product" p ON p.id = pv."productId"
          WHERE p."domainId" = domain_id 
            AND pv.embedding_small IS NOT NULL
          ORDER BY distance
          LIMIT search_limit;
        ELSE
          -- HNSW –∏–Ω–¥–µ–∫—Å
          RETURN QUERY
          SELECT 
            pv.id::INTEGER,
            pv.title::TEXT,
            pv.price::DECIMAL,
            pv.sku::TEXT,
            (pv.embedding_small <=> query_vector)::FLOAT as distance,
            p.id::INTEGER as product_id,
            p.title::TEXT as product_title,
            p.description::TEXT as product_description
          FROM "ProductVariant" pv
          JOIN "Product" p ON p.id = pv."productId"
          WHERE p."domainId" = domain_id 
            AND pv.embedding_small IS NOT NULL
          ORDER BY pv.embedding_small <=> query_vector
          LIMIT search_limit;
        END IF;
      END;
      $$ LANGUAGE plpgsql;
    `;

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è adaptive_variant_search');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('\nüß™ === –¢–ï–°–¢ –ê–î–ê–ü–¢–ò–í–ù–´–• –§–£–ù–ö–¶–ò–ô ===');

    const domain = await prisma.domain.findFirst({
      where: { hostname: 'localhost' }
    });

    if (!domain) {
      console.log('‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
    const testVector = '[' + Array(1536).fill(0.1).join(',') + ']';

    const iterations = 5;
    const adaptiveTimes: number[] = [];

    for (let i = 0; i < iterations; i++) {
      const start = Date.now();

      const products = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        description: string | null;
        distance: number;
      }>>`
        SELECT * FROM adaptive_product_search(${domain.id}, ${testVector}::vector, 10);
      `;

      const variants = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        price: number;
        sku: string | null;
        distance: number;
        product_id: number;
        product_title: string;
        product_description: string | null;
      }>>`
        SELECT * FROM adaptive_variant_search(${domain.id}, ${testVector}::vector, 10);
      `;

      const time = Date.now() - start;
      adaptiveTimes.push(time);

      console.log(`–ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}: ${time}ms (${products.length} —Ç–æ–≤–∞—Ä–æ–≤, ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)`);
    }

    const avgAdaptive = adaptiveTimes.reduce((a, b) => a + b, 0) / adaptiveTimes.length;
    console.log(`\n‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: ${avgAdaptive.toFixed(1)}ms`);

    console.log('\nüí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');
    console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ production:');
    console.log('   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
    console.log('   - –ë—ã—Å—Ç—Ä—ã–µ –¥–ª—è –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('   - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É—é—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('');
    console.log('2. –ü–æ—Ä–æ–≥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: 100 –∑–∞–ø–∏—Å–µ–π');
    console.log('   - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏');
    console.log('   - –ú–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ');
    console.log('');
    console.log('3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å semantic-search.service.ts:');
    console.log('   - –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏');
    console.log('   - –ü–æ–ª—É—á–∏—Ç–µ –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createAdaptiveSearch(); 