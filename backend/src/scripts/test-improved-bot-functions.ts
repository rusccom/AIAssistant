#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import { 
  searchProducts, 
  getProductInfo,
  getAllFunctionDefinitions,
  executeBotFunction,
  type SearchProductsResult,
  type GetProductInfoResult
} from '../bot-functions';

async function testImprovedBotFunctions() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –£–õ–£–ß–®–ï–ù–ù–£–Æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É Bot Functions —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π...\n');

    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        console.log('üìã === –¢–ï–°–¢ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π ===\n');
        
        const functionDefinitions = getAllFunctionDefinitions();
        console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: ${functionDefinitions.length}`);
        
        functionDefinitions.forEach((func, index) => {
            console.log(`${index + 1}. ${func.function.name} (${func.type})`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${func.function.description}`);
            console.log(`   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(func.function.parameters.required)}`);
        });

        console.log('\n' + '‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ search_products —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
        console.log('üîç === –¢–ï–°–¢ 2: –§—É–Ω–∫—Ü–∏—è search_products (–ø—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ===\n');
        
        const searchTests = [
            { query: '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256', hostname: 'localhost', description: '–í–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å' },
            { query: '   ', hostname: 'localhost', description: '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (–≤–∞–ª–∏–¥–∞—Ü–∏—è)' },
            { query: '–∫—Ä—É–∂–∫–∞', hostname: 'unknown-domain', description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω' }
        ];

        for (const test of searchTests) {
            console.log(`üìù –¢–µ—Å—Ç: ${test.description} - "${test.query}"`);
            
            const result: SearchProductsResult = await searchProducts({
                query: test.query,
                hostname: test.hostname
            });

            if (result.success) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ ${result.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${result.response}"`);
                console.log(`üîß –¢–∏–ø –ø–æ–∏—Å–∫–∞: ${result.searchType}`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || 'Unknown'}`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${result.response}"`);
            }
            
            console.log('');
        }

        console.log('‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 3: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_product_info —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
        console.log('üì¶ === –¢–ï–°–¢ 3: –§—É–Ω–∫—Ü–∏—è get_product_info (–ø—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ===\n');
        
        const productTests = [
            { productId: 1, hostname: 'localhost', description: '–í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–≤–∞—Ä' },
            { productId: -1, hostname: 'localhost', description: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID (–≤–∞–ª–∏–¥–∞—Ü–∏—è)' },
            { productId: 2, variantId: 2, hostname: 'localhost', description: '–° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞' },
            { productId: 999, hostname: 'localhost', description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä' },
            { productId: 1, hostname: 'unknown-domain', description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω' }
        ];

        for (const test of productTests) {
            console.log(`üìù –¢–µ—Å—Ç: ${test.description} - Product ${test.productId}${test.variantId ? `, Variant ${test.variantId}` : ''}`);
            
            const result: GetProductInfoResult = await getProductInfo({
                productId: test.productId,
                variantId: test.variantId,
                hostname: test.hostname
            });

            if (result.success) {
                console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ${result.product.title}`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${result.response}"`);
                console.log(`üí∞ –¶–µ–Ω–∞: $${(result.product.variant.price / 100).toFixed(2)}`);
                console.log(`üìã SKU: ${result.product.variant.sku || 'N/A'}`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || 'Unknown'}`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${result.response}"`);
            }
            
            console.log('');
        }

        console.log('‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ executeBotFunction
        console.log('ü§ñ === –¢–ï–°–¢ 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ executeBotFunction ===\n');
        
        const executionTests = [
            {
                functionName: 'search_products',
                args: { query: '–∞–π—Ñ–æ–Ω', hostname: 'localhost' },
                description: '–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ executeBotFunction'
            },
            {
                functionName: 'get_product_info', 
                args: { productId: 1, hostname: 'localhost' },
                description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ executeBotFunction'
            },
            {
                functionName: 'unknown_function',
                args: { test: 'data' },
                description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è'
            }
        ];

        for (const test of executionTests) {
            console.log(`üìù –¢–µ—Å—Ç: ${test.description}`);
            
            try {
                const result = await executeBotFunction(test.functionName, test.args);
                console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:`, JSON.stringify(result, null, 2).substring(0, 200) + '...');
            } catch (error: any) {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
            
            console.log('');
        }

        console.log('‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        console.log('üîß === –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ ===\n');
        
        console.log('‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é');
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ union —Ç–∏–ø—ã');
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞');

        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Bot Functions –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log('\nüìä –ò—Ç–æ–≥–∏:');
        console.log('   ‚úÖ –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        console.log('   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
        console.log('   ‚úÖ –ú–∞—à–∏–Ω–Ω–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫');
        console.log('   ‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤');

    } catch (error: any) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }
}

if (require.main === module) {
    testImprovedBotFunctions().catch(console.error);
} 