#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkTools() {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º tools –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ tools –∏–∑ –±–∞–∑—ã
        const tools = await prisma.tool.findMany({
            include: {
                botConfigurations: {
                    include: {
                        domain: true
                    }
                }
            }
        });

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ tools: ${tools.length}\n`);

        if (tools.length === 0) {
            console.log('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö tools');
            console.log('üí° –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å tool –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ tools
        tools.forEach((tool, index) => {
            console.log(`${index + 1}. ${tool.name}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tool.description}`);
            console.log(`   –¢–∏–ø: ${tool.type}`);
            console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${tool.isActive ? '‚úÖ' : '‚ùå'}`);
            console.log(`   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(tool.config, null, 2)}`);
            console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(tool.parameters, null, 2)}`);
            console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–æ–º–µ–Ω–∞—Ö: ${tool.botConfigurations.length}`);
            
            tool.botConfigurations.forEach(config => {
                console.log(`     - ${config.domain?.hostname || 'Unknown domain'}`);
            });
            
            console.log('‚îÄ'.repeat(80) + '\n');
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ domains –µ—Å—Ç—å
        const domains = await prisma.domain.findMany({
            include: {
                botConfiguration: {
                    include: {
                        tools: true
                    }
                }
            }
        });

        console.log(`üåê –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: ${domains.length}\n`);

        domains.forEach((domain, index) => {
            console.log(`${index + 1}. ${domain.hostname}`);
            if (domain.botConfiguration) {
                console.log(`   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: ‚úÖ`);
                console.log(`   Tools –≤ –±–æ—Ç–µ: ${domain.botConfiguration.tools.length}`);
                domain.botConfiguration.tools.forEach(tool => {
                    console.log(`     - ${tool.name} (${tool.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})`);
                });
            } else {
                console.log(`   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: ‚ùå`);
            }
            console.log('');
        });

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

if (require.main === module) {
    checkTools().catch(console.error);
} 