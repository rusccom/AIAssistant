#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

const BASE_URL = 'http://localhost:3000';
const HOSTNAME = 'localhost';

async function makeRequest(url: string, data: any, method: string = 'POST') {
    const options: any = {
        method,
        headers: {
            'Content-Type': 'application/json',
        }
    };

    if (method === 'POST' && data) {
        options.body = JSON.stringify(data);
    }

    const response = await fetch(url, options);
    const responseData = await response.json();
    
    return {
        status: response.status,
        data: responseData
    };
}

async function testNewBotFunctions() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ù–û–í–£–Æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É Bot Functions...\n');

    try {
        // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö functions
        console.log('üìã === –¢–ï–°–¢ 1: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö bot functions ===\n');
        
        const functionsResponse = await makeRequest(`${BASE_URL}/api/bot-execute`, {}, 'GET');
        
        if (functionsResponse.status === 200) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π');
            console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${functionsResponse.data.count}`);
            
            functionsResponse.data.functions.forEach((func: any, index: number) => {
                console.log(`${index + 1}. ${func.name}`);
                console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${func.description}`);
                console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(func.parameters.required)}`);
            });
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: ${functionsResponse.status}`);
        }

        console.log('\n' + '‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω–∏—Ç—å search_products
        console.log('üîç === –¢–ï–°–¢ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ search_products ===\n');
        
        const testQueries = [
            '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256',
            '–∫—Ä—É–∂–∫–∞',
            'bluetooth –Ω–∞—É—à–Ω–∏–∫–∏'
        ];

        for (const query of testQueries) {
            console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${query}"`);
            
            const searchResponse = await makeRequest(`${BASE_URL}/api/bot-execute/search_products`, {
                query,
                hostname: HOSTNAME
            });

            if (searchResponse.status === 200) {
                console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${searchResponse.data.response}"`);
                console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${searchResponse.data.products?.length || 0}`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${searchResponse.status} - ${searchResponse.data.error}`);
            }
            
            console.log('');
        }

        console.log('‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–∏—Ç—å get_product_info
        console.log('üì¶ === –¢–ï–°–¢ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ get_product_info ===\n');
        
        const productTests = [
            { productId: 1, description: '–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä' },
            { productId: 2, variantId: 2, description: '–í—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä, –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç' },
            { productId: 999, description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä' }
        ];

        for (const test of productTests) {
            console.log(`üìù –¢–µ—Å—Ç: ${test.description}`);
            
            const productResponse = await makeRequest(`${BASE_URL}/api/bot-execute/get_product_info`, {
                productId: test.productId,
                variantId: test.variantId,
                hostname: HOSTNAME
            });

            if (productResponse.status === 200) {
                console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${productResponse.data.response}"`);
                if (productResponse.data.product) {
                    console.log(`üì¶ –¢–æ–≤–∞—Ä: ${productResponse.data.product.title}`);
                }
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${productResponse.status} - ${productResponse.data.error}`);
            }
            
            console.log('');
        }

        console.log('‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 4: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        console.log('‚ùì === –¢–ï–°–¢ 4: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===\n');
        
        const unknownResponse = await makeRequest(`${BASE_URL}/api/bot-execute/unknown_function`, {
            test: 'data'
        });

        if (unknownResponse.status === 404) {
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏');
            console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${unknownResponse.data.error}`);
        } else {
            console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${unknownResponse.status}`);
        }

        console.log('\n' + '‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 5: Token API —Å –Ω–æ–≤—ã–º–∏ functions
        console.log('üîë === –¢–ï–°–¢ 5: Token API —Å –Ω–æ–≤—ã–º–∏ functions ===\n');
        
        const tokenResponse = await makeRequest(`${BASE_URL}/api/token`, {
            hostname: HOSTNAME
        });

        if (tokenResponse.status === 200) {
            console.log('‚úÖ Token API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ functions');
            console.log(`üõ†Ô∏è Functions –≤ –æ—Ç–≤–µ—Ç–µ: ${tokenResponse.data.tools?.length || 0}`);
            
            if (tokenResponse.data.tools && tokenResponse.data.tools.length > 0) {
                console.log('\nüì¶ Functions –¥–ª—è OpenAI:');
                tokenResponse.data.tools.forEach((tool: any, index: number) => {
                    console.log(`${index + 1}. ${tool.name} (${tool.type})`);
                });
            }
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ Token API: ${tokenResponse.status}`);
        }

        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Bot Functions –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    } catch (error: any) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

if (require.main === module) {
    testNewBotFunctions().catch(console.error);
} 