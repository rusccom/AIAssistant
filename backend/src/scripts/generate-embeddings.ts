#!/usr/bin/env ts-node

import { PrismaClient } from '@prisma/client';
import { embeddingService } from '../services/embedding.service';

const prisma = new PrismaClient();

async function generateEmbeddingsForAllProducts() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é embeddings –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        const domains = await prisma.domain.findMany({
            include: {
                products: {
                    include: {
                        variants: true
                    }
                }
            }
        });

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: ${domains.length}`);

        let totalProducts = 0;
        let processedProducts = 0;

        // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
        for (const domain of domains) {
            totalProducts += domain.products.length;
        }

        console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalProducts}`);

        if (totalProducts === 0) {
            console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
        for (const domain of domains) {
            if (domain.products.length === 0) {
                console.log(`‚è≠Ô∏è  –î–æ–º–µ–Ω ${domain.hostname} –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue;
            }

            console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–µ–Ω: ${domain.hostname} (${domain.products.length} —Ç–æ–≤–∞—Ä–æ–≤)`);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–º–µ–Ω–∞
            for (let i = 0; i < domain.products.length; i++) {
                const product = domain.products[i];
                processedProducts++;
                
                console.log(`\n[${processedProducts}/${totalProducts}] üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${product.title}`);
                
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ embedding
                    const hasEmbedding = (product as any).embedding && (product as any).embedding.length > 0;
                    
                    if (hasEmbedding) {
                        console.log(`  ‚úÖ –£ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –µ—Å—Ç—å embedding, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        continue;
                    }

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    const productEmbedding = await embeddingService.generateProductEmbedding(product);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                    await prisma.product.update({
                        where: { id: product.id },
                        data: { embedding: productEmbedding } as any
                    });

                    console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (${productEmbedding.length} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å)`);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    for (let j = 0; j < product.variants.length; j++) {
                        const variant = product.variants[j];
                        
                        console.log(`    üîÑ –í–∞—Ä–∏–∞–Ω—Ç ${j + 1}/${product.variants.length}: ${variant.title}`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ embedding —É –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        const variantHasEmbedding = (variant as any).embedding && (variant as any).embedding.length > 0;
                        
                        if (variantHasEmbedding) {
                            console.log(`    ‚úÖ –£ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å embedding, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                            continue;
                        }

                        const variantEmbedding = await embeddingService.generateVariantEmbedding(product, variant);
                        
                        await prisma.productVariant.update({
                            where: { id: variant.id },
                            data: { embedding: variantEmbedding } as any
                        });

                        console.log(`    ‚úÖ –°–æ–∑–¥–∞–Ω embedding –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞`);
                    }

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI
                    await new Promise(resolve => setTimeout(resolve, 200));
                    
                } catch (error) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                    continue;
                }
            }

            console.log(`‚úÖ –î–æ–º–µ–Ω ${domain.hostname} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
        }

        console.log(`\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –î–æ–º–µ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${domains.length}`);
        console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedProducts}/${totalProducts}`);

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
async function generateEmbeddingsForDomain(hostname: string) {
    console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –¥–ª—è –¥–æ–º–µ–Ω–∞: ${hostname}`);
    
    try {
        const domain = await prisma.domain.findUnique({
            where: { hostname },
            include: {
                products: {
                    include: {
                        variants: true
                    }
                }
            }
        });

        if (!domain) {
            console.log(`‚ùå –î–æ–º–µ–Ω ${hostname} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        if (domain.products.length === 0) {
            console.log(`‚ùå –í –¥–æ–º–µ–Ω–µ ${hostname} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤`);
            return;
        }

        await embeddingService.generateEmbeddingsForDomain(domain.id);
        
        console.log(`‚úÖ Embeddings –¥–ª—è –¥–æ–º–µ–Ω–∞ ${hostname} —Å–æ–∑–¥–∞–Ω—ã`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);
    
    if (args.length > 0) {
        const hostname = args[0];
        await generateEmbeddingsForDomain(hostname);
    } else {
        await generateEmbeddingsForAllProducts();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

export { generateEmbeddingsForAllProducts, generateEmbeddingsForDomain }; 