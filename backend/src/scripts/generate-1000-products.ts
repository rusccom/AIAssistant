#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';
import openaiService from '../services/openai.service';

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
const categories = [
  {
    name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã',
    brands: ['iPhone', 'Samsung Galaxy', 'Xiaomi', 'Huawei', 'OnePlus', 'Google Pixel'],
    models: ['Pro', 'Max', 'Ultra', 'Plus', 'Lite', 'Mini'],
    colors: ['–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–∏–Ω–∏–π', '–ó–æ–ª–æ—Ç–æ–π', '–°–µ—Ä—ã–π', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', '–ó–µ–ª–µ–Ω—ã–π'],
    memory: ['64GB', '128GB', '256GB', '512GB', '1TB']
  },
  {
    name: '–ù–æ—É—Ç–±—É–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã',
    brands: ['MacBook', 'ThinkPad', 'Dell XPS', 'HP Pavilion', 'ASUS ZenBook', 'Acer Aspire'],
    models: ['Air', 'Pro', 'Gaming', 'Business', 'Ultrabook', 'Workstation'],
    specs: ['Intel i5', 'Intel i7', 'AMD Ryzen 5', 'AMD Ryzen 7', '8GB RAM', '16GB RAM', '32GB RAM']
  },
  {
    name: '–û–¥–µ–∂–¥–∞',
    types: ['–§—É—Ç–±–æ–ª–∫–∞', '–î–∂–∏–Ω—Å—ã', '–ö—É—Ä—Ç–∫–∞', '–ü–ª–∞—Ç—å–µ', '–°–≤–∏—Ç–µ—Ä', '–†—É–±–∞—à–∫–∞', '–ö—Ä–æ—Å—Å–æ–≤–∫–∏', '–ë–æ—Ç–∏–Ω–∫–∏'],
    brands: ['Nike', 'Adidas', 'Zara', 'H&M', 'Uniqlo', 'Tommy Hilfiger'],
    sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
    colors: ['–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–∏–Ω–∏–π', '–ö—Ä–∞—Å–Ω—ã–π', '–°–µ—Ä—ã–π', '–ë–µ–∂–µ–≤—ã–π', '–ó–µ–ª–µ–Ω—ã–π']
  },
  {
    name: '–ö–Ω–∏–≥–∏',
    types: ['–†–æ–º–∞–Ω', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–£—á–µ–±–Ω–∏–∫', '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è', '–ü–æ—ç–∑–∏—è', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫'],
    authors: ['–¢–æ–ª—Å—Ç–æ–π', '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–ü—É—à–∫–∏–Ω', '–ß–µ—Ö–æ–≤', '–ë—É–ª–≥–∞–∫–æ–≤', '–ü–∞—Å—Ç–µ—Ä–Ω–∞–∫'],
    subjects: ['–ò—Å—Ç–æ—Ä–∏—è', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ò—Å–∫—É—Å—Å—Ç–≤–æ']
  },
  {
    name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
    types: ['–î–∏–≤–∞–Ω', '–ö—Ä–µ—Å–ª–æ', '–°—Ç–æ–ª', '–õ–∞–º–ø–∞', '–ö–æ–≤–µ—Ä', '–®—Ç–æ—Ä—ã', '–ü–æ–¥—É—à–∫–∞', '–í–∞–∑–∞'],
    materials: ['–î–µ—Ä–µ–≤–æ', '–ú–µ—Ç–∞–ª–ª', '–°—Ç–µ–∫–ª–æ', '–¢–∫–∞–Ω—å', '–ö–æ–∂–∞', '–ü–ª–∞—Å—Ç–∏–∫'],
    colors: ['–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–µ—Ä—ã–π', '–ë–µ–∂–µ–≤—ã–π', '–°–∏–Ω–∏–π']
  },
  {
    name: '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å',
    types: ['–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –±–µ–≥–∞', '–¢–µ–Ω–Ω–∏—Å–Ω–∞—è —Ä–∞–∫–µ—Ç–∫–∞', '–§—É—Ç–±–æ–ª—å–Ω—ã–π –º—è—á', '–ö–æ–≤—Ä–∏–∫ –¥–ª—è –π–æ–≥–∏', '–ì–∞–Ω—Ç–µ–ª–∏'],
    brands: ['Nike', 'Adidas', 'Puma', 'Reebok', 'Under Armour', 'Wilson'],
    weights: ['1–∫–≥', '2–∫–≥', '5–∫–≥', '10–∫–≥', '15–∫–≥', '20–∫–≥']
  },
  {
    name: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥–µ',
    types: ['–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞', '–®–∞–º–ø—É–Ω—å', '–ü–æ–º–∞–¥–∞', '–î—É—Ö–∏', '–õ–∞–∫ –¥–ª—è –Ω–æ–≥—Ç–µ–π', '–ú–∞—Å–∫–∞ –¥–ª—è –ª–∏—Ü–∞'],
    brands: ['L\'Oreal', 'Maybelline', 'Chanel', 'Dior', 'MAC', 'Clinique'],
    volumes: ['50–º–ª', '100–º–ª', '150–º–ª', '200–º–ª', '250–º–ª']
  },
  {
    name: '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏',
    types: ['–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö', '–®–æ–∫–æ–ª–∞–¥', '–ú–∞–∫–∞—Ä–æ–Ω—ã', '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', '–ú–µ–¥', '–ß–∞–π'],
    brands: ['Lavazza', 'Jacobs', 'Nestle', 'Barilla', 'Ahmad Tea', 'Lipton'],
    weights: ['100–≥', '250–≥', '500–≥', '1–∫–≥', '2–∫–≥']
  },
  {
    name: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã',
    types: ['–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–µ –º–∞—Å–ª–æ', '–®–∏–Ω—ã', '–ê–≤—Ç–æ—Ö–∏–º–∏—è', 'GPS –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä', '–í–∏–¥–µ–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä'],
    brands: ['Michelin', 'Bridgestone', 'Garmin', 'TomTom', 'Shell', 'Mobil'],
    specs: ['5W-30', '10W-40', 'R16', 'R17', 'R18']
  },
  {
    name: '–ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ',
    types: ['–ù–∞—É—à–Ω–∏–∫–∏ Bluetooth', '–ü—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏', '–ö–æ–ª–æ–Ω–∫–∞ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω'],
    brands: ['Sony', 'Bose', 'JBL', 'Sennheiser', 'Audio-Technica', 'Beats'],
    features: ['–®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ', '–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ', '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ', '–°–∫–ª–∞–¥–Ω—ã–µ']
  }
];

async function generateEmbedding(text: string): Promise<number[]> {
  try {
    const response = await openaiService.getClient().embeddings.create({
      model: 'text-embedding-3-small',
      input: text,
      encoding_format: 'float'
    });
    return response.data[0].embedding;
  } catch (error) {
    console.error('Error generating embedding:', error);
    throw error;
  }
}

function getRandomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function generatePrice(): number {
  // –¶–µ–Ω—ã –æ—Ç 500 —Ä—É–±–ª–µ–π –¥–æ 150,000 —Ä—É–±–ª–µ–π (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
  const minPrice = 50000;
  const maxPrice = 15000000;
  return Math.floor(Math.random() * (maxPrice - minPrice)) + minPrice;
}

function generateSKU(categoryName: string, productIndex: number, variantIndex: number = 0): string {
  const categoryCode = categoryName.split(' ')[0].toUpperCase().slice(0, 3);
  const productCode = productIndex.toString().padStart(4, '0');
  const variantCode = variantIndex > 0 ? `-${variantIndex.toString().padStart(2, '0')}` : '';
  return `${categoryCode}${productCode}${variantCode}`;
}

async function generateProductName(category: any): Promise<{ title: string, description: string }> {
  let title = '';
  let description = '';

  switch (category.name) {
    case '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã':
      const brand = getRandomElement(category.brands);
      const model = getRandomElement(category.models);
      const memory = getRandomElement(category.memory);
      title = `${brand} ${model} ${memory}`;
      description = `–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω ${brand} —Å ${memory} –ø–∞–º—è—Ç–∏, –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π –∏ –º–æ—â–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä`;
      break;

    case '–ù–æ—É—Ç–±—É–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã':
      const laptop = getRandomElement(category.brands);
      const spec = getRandomElement(category.specs);
      title = `${laptop} ${spec}`;
      description = `–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ ${laptop} —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º ${spec}, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π`;
      break;

    case '–û–¥–µ–∂–¥–∞':
      const clothing = getRandomElement(category.types) as string;
      const clothingBrand = getRandomElement(category.brands) as string;
      title = `${clothing} ${clothingBrand}`;
      description = `–°—Ç–∏–ª—å–Ω–∞—è ${clothing.toLowerCase()} –æ—Ç ${clothingBrand}, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω`;
      break;

    case '–ö–Ω–∏–≥–∏':
      const bookType = getRandomElement(category.types) as string;
      const topic = getRandomElement(category.subjects) as string;
      title = `${bookType} –ø–æ ${topic}`;
      description = `–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ –∂–∞–Ω—Ä–µ "${bookType.toLowerCase()}" –Ω–∞ —Ç–µ–º—É ${topic.toLowerCase()}, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é`;
      break;

    case '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞':
      const homeItem = getRandomElement(category.types) as string;
      const material = getRandomElement(category.materials) as string;
      title = `${homeItem} –∏–∑ ${material.toLowerCase()}–∞`;
      description = `–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è ${homeItem.toLowerCase()} –∏–∑ ${material.toLowerCase()}–∞, –æ—Ç–ª–∏—á–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä—å–µ—Ä—É`;
      break;

    case '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å':
      const sportItem = getRandomElement(category.types) as string;
      const sportBrand = getRandomElement(category.brands) as string;
      title = `${sportItem} ${sportBrand}`;
      description = `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ${sportItem.toLowerCase()} –æ—Ç ${sportBrand}`;
      break;

    case '–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥–µ':
      const beautyItem = getRandomElement(category.types) as string;
      const beautyBrand = getRandomElement(category.brands) as string;
      const volume = getRandomElement(category.volumes) as string;
      title = `${beautyItem} ${beautyBrand} ${volume}`;
      description = `–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞ ${beautyItem.toLowerCase()} –æ—Ç ${beautyBrand}, –æ–±—ä–µ–º ${volume}`;
      break;

    case '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏':
      const foodItem = getRandomElement(category.types) as string;
      const foodBrand = getRandomElement(category.brands) as string;
      const weight = getRandomElement(category.weights) as string;
      title = `${foodItem} ${foodBrand} ${weight}`;
      description = `–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è ${foodItem.toLowerCase()} –æ—Ç ${foodBrand}, –≤–µ—Å ${weight}`;
      break;

    case '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã':
      const autoItem = getRandomElement(category.types) as string;
      const autoBrand = getRandomElement(category.brands) as string;
      title = `${autoItem} ${autoBrand}`;
      description = `–ù–∞–¥–µ–∂–Ω—ã–µ –∞–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã ${autoItem.toLowerCase()} –æ—Ç ${autoBrand}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ`;
      break;

    case '–ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ':
      const audioItem = getRandomElement(category.types) as string;
      const audioBrand = getRandomElement(category.brands) as string;
      const feature = getRandomElement(category.features) as string;
      title = `${audioItem} ${audioBrand} ${feature}`;
      description = `–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞ ${audioItem.toLowerCase()} –æ—Ç ${audioBrand} —Å —Ñ—É–Ω–∫—Ü–∏–µ–π ${feature.toLowerCase()}`;
      break;

    default:
      title = '–¢–æ–≤–∞—Ä';
      description = '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';
  }

  return { title, description };
}

async function generate1000Products() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 1000 —Ç–æ–≤–∞—Ä–æ–≤...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω localhost
  let domain = await prisma.domain.findFirst({
    where: { hostname: 'localhost' }
  });

  if (!domain) {
    console.log('‚ùå –î–æ–º–µ–Ω localhost –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω...');
    const user = await prisma.user.findFirst();
    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    domain = await prisma.domain.create({
      data: {
        hostname: 'localhost',
        userId: user.id
      }
    });
    console.log('‚úÖ –î–æ–º–µ–Ω localhost —Å–æ–∑–¥–∞–Ω');
  }

  console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω: ${domain.hostname} (ID: ${domain.id})`);

  let totalCreated = 0;

  for (let i = 0; i < 1000; i++) {
    try {
      const category = getRandomElement(categories);
      const { title, description } = await generateProductName(category);

      // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
      const hasVariants = Math.random() > 0.3;

      if (hasVariants && (category.colors || category.sizes || category.memory)) {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        const variantCount = Math.floor(Math.random() * 4) + 2; // 2-5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        const variants = [];

        for (let v = 0; v < variantCount; v++) {
          let variantTitle = '';
          const basePrice = generatePrice();

          if (category.colors) {
            const color = getRandomElement(category.colors);
            variantTitle = color;
          }

          if (category.sizes) {
            const size = getRandomElement(category.sizes);
            variantTitle = variantTitle ? `${variantTitle} ${size}` : size;
          }

          if (category.memory) {
            const memory = getRandomElement(category.memory);
            variantTitle = variantTitle ? `${variantTitle} ${memory}` : memory;
          }

          if (!variantTitle) {
            variantTitle = `–í–∞—Ä–∏–∞–Ω—Ç ${v + 1}`;
          }

          const sku = generateSKU(category.name, i + 1, v + 1);

          variants.push({
            title: variantTitle,
            price: basePrice + (v * 1000), // –ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ
            sku: sku
          });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        const product = await prisma.product.create({
          data: {
            title,
            description,
            status: 'active',
            domainId: domain.id,
            variants: {
              create: variants
            }
          },
          include: { variants: true }
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        const productText = `${title} ${description}`;
        const productEmbedding = await generateEmbedding(productText);
        const productVector = '[' + productEmbedding.join(',') + ']';

        await prisma.$queryRaw`
          UPDATE "Product" 
          SET embedding_small = ${productVector}::vector 
          WHERE id = ${product.id};
        `;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        for (const variant of product.variants) {
          const variantText = `${title} ${variant.title} ${description}`;
          const variantEmbedding = await generateEmbedding(variantText);
          const variantVector = '[' + variantEmbedding.join(',') + ']';

          await prisma.$queryRaw`
            UPDATE "ProductVariant" 
            SET embedding_small = ${variantVector}::vector 
            WHERE id = ${variant.id};
          `;
        }

        console.log(`‚úÖ ${i + 1}/1000: –¢–æ–≤–∞—Ä "${title}" —Å–æ–∑–¥–∞–Ω —Å ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–≤–∞—Ä
        const price = generatePrice();
        const sku = generateSKU(category.name, i + 1);

        const product = await prisma.product.create({
          data: {
            title,
            description,
            status: 'active',
            domainId: domain.id,
            variants: {
              create: {
                title: 'Default Title',
                price: price,
                sku: sku
              }
            }
          },
          include: { variants: true }
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        const productText = `${title} ${description}`;
        const productEmbedding = await generateEmbedding(productText);
        const productVector = '[' + productEmbedding.join(',') + ']';

        await prisma.$queryRaw`
          UPDATE "Product" 
          SET embedding_small = ${productVector}::vector 
          WHERE id = ${product.id};
        `;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
        const variant = product.variants[0];
        const variantEmbedding = await generateEmbedding(productText);
        const variantVector = '[' + variantEmbedding.join(',') + ']';

        await prisma.$queryRaw`
          UPDATE "ProductVariant" 
          SET embedding_small = ${variantVector}::vector 
          WHERE id = ${variant.id};
        `;

        console.log(`‚úÖ ${i + 1}/1000: –¢–æ–≤–∞—Ä "${title}" —Å–æ–∑–¥–∞–Ω`);
      }

      totalCreated++;

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI
      await new Promise(resolve => setTimeout(resolve, 100));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ç–æ–≤–∞—Ä–æ–≤
      if ((i + 1) % 50 === 0) {
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/1000 —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ`);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${i + 1}:`, error);
      continue;
    }
  }

  console.log(`üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ ${totalCreated} —Ç–æ–≤–∞—Ä–æ–≤ —Å embeddings`);
  console.log('üîç –¢–µ–ø–µ—Ä—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑–æ–π —Ç–æ–≤–∞—Ä–æ–≤!');
}

if (require.main === module) {
  generate1000Products()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    });
}

export { generate1000Products }; 