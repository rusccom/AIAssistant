#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';
import openaiService from '../services/openai.service';

// –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
const categories = [
  '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ù–æ—É—Ç–±—É–∫–∏', '–û–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
  '–°–ø–æ—Ä—Ç', '–ö–æ—Å–º–µ—Ç–∏–∫–∞', '–ï–¥–∞', '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–ù–∞—É—à–Ω–∏–∫–∏'
];

const brands = [
  'Apple', 'Samsung', 'Nike', 'Adidas', 'Sony', 'LG', 'Dell', 'HP', 
  'Zara', 'H&M', 'Coca-Cola', 'Pepsi', 'Toyota', 'BMW', 'Mercedes'
];

const adjectives = [
  '–ü—Ä–µ–º–∏—É–º', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–°—Ç–∏–ª—å–Ω—ã–π', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
  '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '–ù–∞–¥–µ–∂–Ω—ã–π'
];

const colors = ['–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–∏–Ω–∏–π', '–ö—Ä–∞—Å–Ω—ã–π', '–°–µ—Ä—ã–π', '–ó–µ–ª–µ–Ω—ã–π', '–ñ–µ–ª—Ç—ã–π'];
const sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
const capacities = ['64GB', '128GB', '256GB', '512GB', '1TB'];

function getRandomElement(array: string[]): string {
  return array[Math.floor(Math.random() * array.length)];
}

async function generateEmbedding(text: string): Promise<number[]> {
  try {
    const response = await openaiService.getClient().embeddings.create({
      model: 'text-embedding-3-small',
      input: text,
      encoding_format: 'float'
    });
    return response.data[0].embedding;
  } catch (error) {
    console.error('Error generating embedding:', error);
    throw error;
  }
}

function generatePrice(): number {
  // –¶–µ–Ω—ã –æ—Ç 500 —Ä—É–±–ª–µ–π –¥–æ 150,000 —Ä—É–±–ª–µ–π (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
  return Math.floor(Math.random() * 14500000) + 50000;
}

function generateSKU(index: number, variantIndex: number = 0): string {
  const productCode = index.toString().padStart(4, '0');
  const variantCode = variantIndex > 0 ? `-${variantIndex.toString().padStart(2, '0')}` : '';
  return `PROD${productCode}${variantCode}`;
}

function generateProductData(index: number): { title: string, description: string } {
  const category = getRandomElement(categories);
  const brand = getRandomElement(brands);
  const adjective = getRandomElement(adjectives);
  
  const title = `${adjective} ${category} ${brand}`;
  const description = `${adjective} —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category} –æ—Ç –±—Ä–µ–Ω–¥–∞ ${brand}. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω.`;
  
  return { title, description };
}

async function generateSimple1000Products() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 1000 —Ç–æ–≤–∞—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω localhost
  let domain = await prisma.domain.findFirst({
    where: { hostname: 'localhost' }
  });

  if (!domain) {
    console.log('‚ùå –î–æ–º–µ–Ω localhost –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω...');
    const user = await prisma.user.findFirst();
    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    domain = await prisma.domain.create({
      data: {
        hostname: 'localhost',
        userId: user.id
      }
    });
    console.log('‚úÖ –î–æ–º–µ–Ω localhost —Å–æ–∑–¥–∞–Ω');
  }

  console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω: ${domain.hostname} (ID: ${domain.id})`);

  let totalCreated = 0;

  for (let i = 0; i < 1000; i++) {
    try {
      const { title, description } = generateProductData(i + 1);

      // 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
      const hasVariants = Math.random() > 0.4;

      if (hasVariants) {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        const variantCount = Math.floor(Math.random() * 3) + 2; // 2-4 –≤–∞—Ä–∏–∞–Ω—Ç–∞
        const variants = [];

        for (let v = 0; v < variantCount; v++) {
          const color = getRandomElement(colors);
          const size = Math.random() > 0.5 ? getRandomElement(sizes) : '';
          const capacity = Math.random() > 0.7 ? getRandomElement(capacities) : '';
          
          let variantTitle = color;
          if (size) variantTitle += ` ${size}`;
          if (capacity) variantTitle += ` ${capacity}`;

          const basePrice = generatePrice();
          const sku = generateSKU(i + 1, v + 1);

          variants.push({
            title: variantTitle,
            price: basePrice + (v * 5000), // –ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ
            sku: sku
          });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        const product = await prisma.product.create({
          data: {
            title,
            description,
            status: 'active',
            domainId: domain.id,
            variants: {
              create: variants
            }
          },
          include: { variants: true }
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        const productText = `${title} ${description}`;
        const productEmbedding = await generateEmbedding(productText);
        const productVector = '[' + productEmbedding.join(',') + ']';

        await prisma.$queryRaw`
          UPDATE "Product" 
          SET embedding_small = ${productVector}::vector 
          WHERE id = ${product.id};
        `;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        for (const variant of product.variants) {
          const variantText = `${title} ${variant.title} ${description}`;
          const variantEmbedding = await generateEmbedding(variantText);
          const variantVector = '[' + variantEmbedding.join(',') + ']';

          await prisma.$queryRaw`
            UPDATE "ProductVariant" 
            SET embedding_small = ${variantVector}::vector 
            WHERE id = ${variant.id};
          `;
        }

        console.log(`‚úÖ ${i + 1}/1000: –¢–æ–≤–∞—Ä "${title}" —Å–æ–∑–¥–∞–Ω —Å ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–≤–∞—Ä
        const price = generatePrice();
        const sku = generateSKU(i + 1);

        const product = await prisma.product.create({
          data: {
            title,
            description,
            status: 'active',
            domainId: domain.id,
            variants: {
              create: {
                title: 'Default Title',
                price: price,
                sku: sku
              }
            }
          },
          include: { variants: true }
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        const productText = `${title} ${description}`;
        const productEmbedding = await generateEmbedding(productText);
        const productVector = '[' + productEmbedding.join(',') + ']';

        await prisma.$queryRaw`
          UPDATE "Product" 
          SET embedding_small = ${productVector}::vector 
          WHERE id = ${product.id};
        `;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
        const variant = product.variants[0];
        const variantEmbedding = await generateEmbedding(productText);
        const variantVector = '[' + variantEmbedding.join(',') + ']';

        await prisma.$queryRaw`
          UPDATE "ProductVariant" 
          SET embedding_small = ${variantVector}::vector 
          WHERE id = ${variant.id};
        `;

        console.log(`‚úÖ ${i + 1}/1000: –¢–æ–≤–∞—Ä "${title}" —Å–æ–∑–¥–∞–Ω`);
      }

      totalCreated++;

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI
      await new Promise(resolve => setTimeout(resolve, 150));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 —Ç–æ–≤–∞—Ä–æ–≤
      if ((i + 1) % 25 === 0) {
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/1000 —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ`);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${i + 1}:`, error);
      continue;
    }
  }

  console.log(`üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ ${totalCreated} —Ç–æ–≤–∞—Ä–æ–≤ —Å embeddings`);
  console.log('üîç –¢–µ–ø–µ—Ä—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑–æ–π —Ç–æ–≤–∞—Ä–æ–≤!');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalProducts = await prisma.product.count({ where: { domainId: domain.id } });
  const totalVariants = await prisma.productVariant.count({
    where: { product: { domainId: domain.id } }
  });
  
  console.log(`üìä –ò—Ç–æ–≥–æ –≤ –±–∞–∑–µ: ${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤ –∏ ${totalVariants} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
}

if (require.main === module) {
  generateSimple1000Products()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    });
}

export { generateSimple1000Products }; 