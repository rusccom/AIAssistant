#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

const BASE_URL = 'http://localhost:3000';
const HOSTNAME = 'localhost';

async function makeRequest(url: string, data: any, method: string = 'POST') {
    const options: any = {
        method,
        headers: {
            'Content-Type': 'application/json',
        }
    };

    if (method === 'POST' && data) {
        options.body = JSON.stringify(data);
    }

    const response = await fetch(url, options);
    const responseData = await response.json();
    
    return {
        status: response.status,
        data: responseData
    };
}

// –°–∏–º—É–ª—è—Ü–∏—è universalExecute —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–∏–¥–∂–µ—Ç–∞
const simulateWidgetFunctionCall = async (params: any, toolName: string) => {
    try {
        const response = await fetch(`${BASE_URL}/api/bot-execute/${toolName}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(params),
        });
        
        if (!response.ok) {
            throw new Error(`Failed to execute ${toolName}: ${response.statusText}`);
        }
        
        const result = await response.json();
        
        // –ù–æ–≤—ã–π API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å success –∏ response
        if (result.success) {
            return result.response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            console.error(`Function ${toolName} failed:`, result.error);
            return result.response || `Sorry, there was an error executing ${toolName}.`;
        }
    } catch (error: any) {
        console.error(`Error executing tool ${toolName}:`, error);
        return `Sorry, there was an error executing ${toolName}.`;
    }
};

async function testWidgetIntegration() {
    console.log('üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞ —Å –Ω–æ–≤—ã–º bot-execute API...\n');

    try {
        // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ –≤–∏–¥–∂–µ—Ç–µ)
        console.log('üîë === –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===\n');
        
        const tokenResponse = await makeRequest(`${BASE_URL}/api/token`, {
            hostname: HOSTNAME
        });

        if (tokenResponse.status === 200) {
            const { token, instructions, tools, voice, model } = tokenResponse.data;
            
            console.log('‚úÖ Token API —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!');
            console.log(`üîë Token –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...`);
            console.log(`üéØ Voice: ${voice}`);
            console.log(`ü§ñ Model: ${model}`);
            console.log(`üõ†Ô∏è Tools –¥–æ—Å—Ç—É–ø–Ω–æ: ${tools?.length || 0}`);
            console.log(`üìã Instructions: ${instructions.substring(0, 100)}...`);
            
            if (tools && tools.length > 0) {
                console.log('\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
                tools.forEach((tool: any, index: number) => {
                    console.log(`${index + 1}. ${tool.name} - ${tool.description}`);
                });
            }
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${tokenResponse.status}`);
            return;
        }

        console.log('\n' + '‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –≤–∏–¥–∂–µ—Ç–∞  
        console.log('üé≠ === –¢–ï–°–¢ 2: –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –≤–∏–¥–∂–µ—Ç–∞ ===\n');
        
        const widgetFunctionTests = [
            {
                toolName: 'search_products',
                params: { 
                    query: '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256', 
                    hostname: HOSTNAME 
                },
                description: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤'
            },
            {
                toolName: 'get_product_info',
                params: { 
                    productId: 2, 
                    variantId: 2, 
                    hostname: HOSTNAME 
                },
                description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ'
            },
            {
                toolName: 'search_products',
                params: { 
                    query: '   ', // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    hostname: HOSTNAME 
                },
                description: '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'
            },
            {
                toolName: 'unknown_function',
                params: { test: 'data' },
                description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è'
            }
        ];

        for (const test of widgetFunctionTests) {
            console.log(`üìù –¢–µ—Å—Ç: ${test.description} (${test.toolName})`);
            console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(test.params)}`);
            
            const result = await simulateWidgetFunctionCall(test.params, test.toolName);
            console.log(`üí¨ –†–µ–∑—É–ª—å—Ç–∞—Ç: "${result}"`);
            console.log('');
        }

        console.log('‚îÄ'.repeat(80) + '\n');

        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ 
        console.log('üîç === –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ ===\n');
        
        console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ search_products...');
        
        const searchResponse = await makeRequest(`${BASE_URL}/api/bot-execute/search_products`, {
            query: '–∫—Ä—É–∂–∫–∞',
            hostname: HOSTNAME
        });

        if (searchResponse.status === 200) {
            const result = searchResponse.data;
            console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
            console.log(`üìä Success: ${result.success}`);
            console.log(`üí¨ Response: "${result.response}"`);
            if (result.success) {
                console.log(`üì¶ Products: ${result.products?.length || 0}`);
                console.log(`üîß Search Type: ${result.searchType}`);
                console.log(`üîç Query: ${result.query}`);
            } else {
                console.log(`‚ùå Error: ${result.error}`);
            }
        } else {
            console.log(`‚ùå HTTP Error: ${searchResponse.status}`);
        }

        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        console.log('   ‚úÖ Token API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('   ‚úÖ Bot-execute API –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—ã–∑–æ–≤—ã');
        console.log('   ‚úÖ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º');
        console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');

    } catch (error: any) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    }
}

if (require.main === module) {
    testWidgetIntegration().catch(console.error);
} 