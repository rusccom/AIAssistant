#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

const BASE_URL = 'http://localhost:3000';

async function testHostnameFlow() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É hostname —á–µ—Ä–µ–∑ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å...\n');

    const testCases = [
        { hostname: 'localhost', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω' },
        { hostname: 'example.com', description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–º–µ–Ω' },
        { hostname: 'mamapack.pl', description: '–î–æ–º–µ–Ω –±–µ–∑ bot configuration' }
    ];

    for (const testCase of testCases) {
        console.log(`üìã === –¢–µ—Å—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞: ${testCase.hostname} ===`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${testCase.description}\n`);

        try {
            // 1. –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –≤–∏–¥–∂–µ—Ç–∞
            console.log('üîë –®–∞–≥ 1: –í–∏–¥–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω...');
            const tokenResponse = await fetch(`${BASE_URL}/api/token`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ hostname: testCase.hostname })
            });

            if (tokenResponse.status === 200) {
                const tokenData = await tokenResponse.json();
                console.log(`‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –¥–ª—è ${testCase.hostname}`);
                console.log(`üõ†Ô∏è Tools –¥–æ—Å—Ç—É–ø–Ω–æ: ${tokenData.tools?.length || 0}`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${tokenResponse.status}`);
                const errorData = await tokenResponse.json();
                console.log(`üí¨ –û—à–∏–±–∫–∞: ${errorData.error}`);
                console.log('‚îÄ'.repeat(80) + '\n');
                continue;
            }

            // 2. –°–∏–º—É–ª—è—Ü–∏—è OpenAI function call (–±–µ–∑ hostname)
            console.log('\nü§ñ –®–∞–≥ 2: OpenAI –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é (–±–µ–∑ hostname)...');
            const openaiParams = {
                query: '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256'
                // OpenAI –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç hostname!
            };

            // 3. –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–º (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ hostname)
            console.log('üîß –®–∞–≥ 3: –í–∏–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç hostname...');
            const enhancedParams = {
                ...openaiParams,
                hostname: testCase.hostname // –í–∏–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç hostname
            };

            console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç OpenAI: ${JSON.stringify(openaiParams)}`);
            console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ backend: ${JSON.stringify(enhancedParams)}`);

            // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            console.log('\nüéØ –®–∞–≥ 4: Backend –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é...');
            const functionResponse = await fetch(`${BASE_URL}/api/bot-execute/search_products`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(enhancedParams)
            });

            if (functionResponse.status === 200) {
                const result = await functionResponse.json();
                console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                console.log(`üìä Success: ${result.success}`);
                console.log(`üí¨ Response: "${result.response}"`);
                if (result.success && result.products) {
                    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.products.length}`);
                }
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ${functionResponse.status}`);
                const errorData = await functionResponse.json();
                console.log(`üí¨ –û—à–∏–±–∫–∞: ${errorData.error || errorData.response}`);
            }

            // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –ë–ï–ó hostname (–∫–∞–∫ –±—ã–ª–æ –±—ã –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
            console.log('\nüö´ –®–∞–≥ 5: –¢–µ—Å—Ç –ë–ï–ó hostname (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)...');
            const noHostnameResponse = await fetch(`${BASE_URL}/api/bot-execute/search_products`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(openaiParams) // –¢–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç OpenAI
            });

            if (noHostnameResponse.status === 200) {
                const result = await noHostnameResponse.json();
                console.log(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å default hostname`);
                console.log(`üí¨ Response: "${result.response}"`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –±–µ–∑ hostname: ${noHostnameResponse.status}`);
            }

        } catch (error: any) {
            console.error(`üí• –û—à–∏–±–∫–∞ –¥–ª—è ${testCase.hostname}:`, error.message);
        }

        console.log('\n' + '‚îÄ'.repeat(80) + '\n');
    }

    // 6. –†–µ–∑—é–º–µ
    console.log('üìã === –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===\n');
    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥–∞—á–∏ hostname:');
    console.log('   1. –í–∏–¥–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç hostname: window.location.hostname');
    console.log('   2. –í–∏–¥–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω —Å hostname');
    console.log('   3. –í–∏–¥–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç hostname –≤ currentHostname');
    console.log('   4. OpenAI –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ë–ï–ó hostname');
    console.log('   5. –í–∏–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç hostname –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    console.log('   6. Backend –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å hostname');
    console.log('   7. Backend –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–æ–º–µ–Ω–µ');
    
    console.log('\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:');
    console.log('   - OpenAI –Ω–µ –∑–Ω–∞–µ—Ç –æ hostname (–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω)');
    console.log('   - –í–∏–¥–∂–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ hostname');
    console.log('   - Backend –ø–æ–ª—É—á–∞–µ—Ç hostname –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞');
    console.log('   - –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞');

    console.log('\nüéâ Hostname flow –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!');
}

if (require.main === module) {
    testHostnameFlow().catch(console.error);
} 