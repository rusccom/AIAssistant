import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function testPgvectorSearch() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º pgvector –ø–æ–∏—Å–∫ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤...\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä (—Å–∏–º—É–ª—è—Ü–∏—è embedding –¥–ª—è "iPhone")
    console.log('üì± === –®–ê–ì 1: –ü–û–ò–°–ö iPhone ===');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º embedding —Å–ª–æ–≤–∞ "iPhone" (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç)
    const iphoneQuery = Array(3072).fill(0);
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ" –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è iPhone
    for (let i = 0; i < 100; i++) {
      iphoneQuery[i] = Math.random() * 0.5 + 0.3; // —á–∏—Å–ª–∞ –æ—Ç 0.3 –¥–æ 0.8
    }
    const iphoneVector = '[' + iphoneQuery.join(',') + ']';

    // –ü—Ä—è–º–æ–π SQL –ø–æ–∏—Å–∫ —Å pgvector
    const pgvectorResults = await prisma.$queryRaw<Array<{
      id: number;
      title: string;
      distance: number;
    }>>`
      SELECT 
        p.id,
        p.title,
        (p.embedding <=> ${iphoneVector}::vector) as distance
      FROM "Product" p
      WHERE p.embedding IS NOT NULL
      ORDER BY p.embedding <=> ${iphoneVector}::vector
      LIMIT 5;
    `;

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã pgvector –ø–æ–∏—Å–∫–∞:');
    pgvectorResults.forEach((result, idx) => {
      console.log(`   ${idx + 1}. ${result.title} (distance: ${result.distance.toFixed(4)})`);
    });

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    console.log('\nüì¶ === –®–ê–ì 2: –ü–û–ò–°–ö –ü–û –í–ê–†–ò–ê–ù–¢–ê–ú ===');
    
    const variantResults = await prisma.$queryRaw<Array<{
      product_title: string;
      variant_title: string;
      distance: number;
    }>>`
      SELECT 
        p.title as product_title,
        pv.title as variant_title,
        (pv.embedding <=> ${iphoneVector}::vector) as distance
      FROM "ProductVariant" pv
      JOIN "Product" p ON p.id = pv."productId"
      WHERE pv.embedding IS NOT NULL
      ORDER BY pv.embedding <=> ${iphoneVector}::vector
      LIMIT 5;
    `;

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º:');
    variantResults.forEach((result, idx) => {
      console.log(`   ${idx + 1}. ${result.product_title} ${result.variant_title} (distance: ${result.distance.toFixed(4)})`);
    });

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    console.log('\nüìè === –®–ê–ì 3: –†–ê–ó–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–°–¢–û–Ø–ù–ò–Ø ===');
    
    const distanceFunctions = [
      { name: '–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ', operator: '<=>', description: '–õ—É—á—à–µ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞' },
      { name: 'L2 (–ï–≤–∫–ª–∏–¥–æ–≤–æ)', operator: '<->', description: '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ' },
      { name: '–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', operator: '<#>', description: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ' }
    ];

    for (const func of distanceFunctions) {
      try {
        const result = await prisma.$queryRaw<Array<{
          title: string;
          distance: number;
        }>>`
          SELECT 
            p.title,
            (p.embedding ${func.operator} ${iphoneVector}::vector) as distance
          FROM "Product" p
          WHERE p.embedding IS NOT NULL
          ORDER BY p.embedding ${func.operator} ${iphoneVector}::vector
          LIMIT 1;
        `;

        if (result.length > 0) {
          console.log(`‚úÖ ${func.name}: ${result[0].title} (${result[0].distance.toFixed(4)})`);
          console.log(`   üìñ ${func.description}`);
        }
      } catch (error: any) {
        console.log(`‚ùå ${func.name}: ${error.message}`);
      }
    }

    // 4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n‚ö° === –®–ê–ì 4: –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    
    const startTime = Date.now();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∏—Å–∫–æ–≤ –ø–æ–¥—Ä—è–¥
    for (let i = 0; i < 5; i++) {
      const randomVector = Array(3072).fill(0).map(() => Math.random());
      const vectorStr = '[' + randomVector.join(',') + ']';
      
      await prisma.$queryRaw`
        SELECT id
        FROM "Product" 
        WHERE embedding IS NOT NULL
        ORDER BY embedding <=> ${vectorStr}::vector
        LIMIT 3;
      `;
    }
    
    const endTime = Date.now();
    console.log(`‚è±Ô∏è 5 –ø–æ–∏—Å–∫–æ–≤ –∑–∞–Ω—è–ª–∏: ${endTime - startTime}ms`);
    console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${(endTime - startTime) / 5}ms`);

    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã
    console.log('\nüìä === –®–ê–ì 5: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ ===');
    
    const stats = await prisma.$queryRaw<Array<{
      table_name: string;
      total_rows: bigint;
      with_embeddings: bigint;
      avg_dimensions: number;
    }>>`
      SELECT 
        'Product' as table_name,
        COUNT(*) as total_rows,
        COUNT(embedding) as with_embeddings,
        AVG(array_length(embedding::float[], 1)) as avg_dimensions
      FROM "Product"
      UNION ALL
      SELECT 
        'ProductVariant' as table_name,
        COUNT(*) as total_rows,
        COUNT(embedding) as with_embeddings,
        AVG(array_length(embedding::float[], 1)) as avg_dimensions
      FROM "ProductVariant";
    `;

    stats.forEach(stat => {
      console.log(`üìã ${stat.table_name}:`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stat.total_rows}`);
      console.log(`   –° embeddings: ${stat.with_embeddings}`);
      console.log(`   –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${stat.avg_dimensions || 'N/A'}`);
    });

    console.log('\nüéâ PGVECTOR –†–ê–ë–û–¢–ê–ï–¢ –£–°–ü–ï–®–ù–û! üéâ');
    console.log('üí° –•–æ—Ç—è –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π,');
    console.log('   –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –Ω–∞—à —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testPgvectorSearch(); 