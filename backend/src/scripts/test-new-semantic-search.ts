import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import { semanticSearchService } from '../services/semantic-search.service';
import { executeSearchProducts } from '../bot-functions/search-products';
import prisma from '../db/prisma';

async function testNewSemanticSearch() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å pgvector...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–º–µ–Ω
    console.log('üìä === –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ===');
    const domain = await prisma.domain.findFirst();
    
    if (!domain) {
      console.log('‚ùå –î–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–º–µ–Ω —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }
    
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω: ${domain.hostname} (ID: ${domain.id})`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ semantic search
    console.log('\nüîç === –®–ê–ì 2: –ü–†–Ø–ú–û–ô SEMANTIC SEARCH ===');
    
    const testQueries = [
      'iPhone',
      '–∫–æ—Ñ–µ',
      'bluetooth –Ω–∞—É—à–Ω–∏–∫–∏',
      '–∫–Ω–∏–≥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –∫—Ä—É–∂–∫–∞'
    ];

    for (const query of testQueries) {
      console.log(`\nüîç –ü–æ–∏—Å–∫: "${query}"`);
      
      const startTime = Date.now();
      const results = await semanticSearchService.searchProducts(query, domain.id, 3);
      const endTime = Date.now();
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${endTime - startTime}ms`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
      
      results.forEach((result, idx) => {
        const type = result.type === 'product' ? 'üì¶' : 'üîñ';
        const price = result.price ? ` - $${(result.price / 100).toFixed(2)}` : '';
        const similarity = `(${(result.similarity * 100).toFixed(1)}%)`;
        
        if (result.type === 'variant') {
          console.log(`   ${idx + 1}. ${type} ${result.productTitle} ${result.title}${price} ${similarity}`);
        } else {
          console.log(`   ${idx + 1}. ${type} ${result.title}${price} ${similarity}`);
        }
      });
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º bot function
    console.log('\nü§ñ === –®–ê–ì 3: BOT FUNCTION SEARCH ===');
    
    for (const query of testQueries.slice(0, 3)) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø—Ä–æ—Å–∞
      console.log(`\nü§ñ Bot –ø–æ–∏—Å–∫: "${query}"`);
      
      const botResult = await executeSearchProducts({ query }, domain.hostname);
      
      if (botResult.success) {
        console.log(`‚úÖ –£—Å–ø–µ—Ö: ${botResult.message}`);
        console.log(`üìä –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${botResult.totalFound || 0}`);
        
        if (botResult.products && botResult.products.length > 0) {
          botResult.products.slice(0, 2).forEach((product: any, idx: number) => {
            const price = product.price ? ` - $${product.price}` : '';
            console.log(`   ${idx + 1}. ${product.title}${price} (similarity: ${product.similarity})`);
          });
        }
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${botResult.error}`);
      }
    }

    // 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n‚ö° === –®–ê–ì 4: –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    
    const perfTestQuery = 'iPhone —á–µ—Ä–Ω—ã–π';
    const iterations = 10;
    
    console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º ${iterations} –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è "${perfTestQuery}"`);
    
    const times: number[] = [];
    
    for (let i = 0; i < iterations; i++) {
      const start = Date.now();
      await semanticSearchService.searchProducts(perfTestQuery, domain.id, 5);
      const end = Date.now();
      times.push(end - start);
    }
    
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(1)}ms`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: ${minTime}ms`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${maxTime}ms`);
    console.log(`   –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞: ${times.join(', ')}ms`);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüéØ === –®–ê–ì 5: –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê ===');
    
    const qualityTests = [
      { query: 'iPhone 15', expectedInTitle: 'iPhone 15' },
      { query: '–∫–æ—Ñ–µ –ª–∞—Ç—Ç–µ', expectedInTitle: '–∫–æ—Ñ–µ' },
      { query: 'bluetooth –Ω–∞—É—à–Ω–∏–∫–∏', expectedInTitle: '–Ω–∞—É—à–Ω–∏–∫–∏' }
    ];
    
    for (const test of qualityTests) {
      console.log(`\nüîç –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞: "${test.query}"`);
      
      const results = await semanticSearchService.searchProducts(test.query, domain.id, 5);
      
      if (results.length === 0) {
        console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        continue;
      }
      
      const topResult = results[0];
      const foundExpected = topResult.title.toLowerCase().includes(test.expectedInTitle.toLowerCase()) ||
                           (topResult.productTitle && topResult.productTitle.toLowerCase().includes(test.expectedInTitle.toLowerCase()));
      
      if (foundExpected) {
        console.log(`‚úÖ –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "${test.expectedInTitle}": ${topResult.title || topResult.productTitle}`);
        console.log(`   Similarity: ${(topResult.similarity * 100).toFixed(1)}%`);
      } else {
        console.log(`‚ö†Ô∏è –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç "${test.expectedInTitle}": ${topResult.title || topResult.productTitle}`);
        console.log(`   Similarity: ${(topResult.similarity * 100).toFixed(1)}%`);
      }
    }

    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! üéâ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testNewSemanticSearch(); 