#!/usr/bin/env ts-node

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

const BASE_URL = 'http://localhost:3000';
const HOSTNAME = 'localhost';

async function makeRequest(url: string, data: any) {
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    });

    const responseData = await response.json();
    
    return {
        status: response.status,
        data: responseData
    };
}

async function testTokenAPI() {
    console.log('üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º Token API —Å –ø–µ—Ä–µ–¥–∞—á–µ–π tools...\n');

    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º token –¥–ª—è localhost
        console.log(`üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º token –¥–ª—è: ${HOSTNAME}`);
        
        const response = await makeRequest(`${BASE_URL}/api/token`, {
            hostname: HOSTNAME
        });

        if (response.status === 200) {
            console.log('‚úÖ Token API —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!');
            console.log(`üîë Token –ø–æ–ª—É—á–µ–Ω: ${response.data.token.substring(0, 20)}...`);
            console.log(`‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${response.data.expires_at}`);
            console.log(`üéØ Voice: ${response.data.voice}`);
            console.log(`üõ†Ô∏è Tools –≤ –æ—Ç–≤–µ—Ç–µ: ${response.data.tools?.length || 0}`);
            
            if (response.data.tools && response.data.tools.length > 0) {
                console.log('\nüì¶ Tools –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—É:');
                response.data.tools.forEach((tool: any, index: number) => {
                    console.log(`${index + 1}. ${tool.name}`);
                    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tool.description}`);
                });
            }

            console.log('\nüìã Instructions:');
            const instructions = response.data.instructions;
            const instructionsPreview = instructions.length > 200 ? 
                instructions.substring(0, 200) + '...' : instructions;
            console.log(instructionsPreview);

        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ ${response.status}:`, response.data);
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º hostname
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º hostname...');
        const badResponse = await makeRequest(`${BASE_URL}/api/token`, {
            hostname: 'unknown-domain.com'
        });

        if (badResponse.status !== 200) {
            console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞: ${badResponse.status}`);
            console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${badResponse.data.error}`);
        } else {
            console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª—Å—è —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞');
        }

    } catch (error: any) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

if (require.main === module) {
    testTokenAPI().catch(console.error);
} 