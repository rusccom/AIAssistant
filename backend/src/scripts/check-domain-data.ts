import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function checkDomainData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    console.log('üåê === –î–û–ú–ï–ù–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–• ===');
    
    const domains = await prisma.domain.findMany({
      select: {
        id: true,
        hostname: true,
        userId: true,
        _count: {
          select: {
            products: true
          }
        }
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${domains.length} –¥–æ–º–µ–Ω–æ–≤:`);
    domains.forEach(domain => {
      console.log(`   üåê ID: ${domain.id}, Hostname: ${domain.hostname}, –¢–æ–≤–∞—Ä–æ–≤: ${domain._count.products}, User: ${domain.userId}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö embeddings
    console.log('\nüì¶ === –¢–û–í–ê–†–´ –ò EMBEDDINGS ===');
    
    const products = await prisma.$queryRaw<Array<{
      id: number;
      title: string;
      domain_id: string;
      hostname: string;
      has_embedding: boolean;
      has_embedding_small: boolean;
    }>>`
      SELECT 
        p.id,
        p.title,
        p."domainId" as domain_id,
        d.hostname,
        (p.embedding IS NOT NULL) as has_embedding,
        (p.embedding_small IS NOT NULL) as has_embedding_small
      FROM "Product" p
      JOIN "Domain" d ON d.id = p."domainId"
      ORDER BY p.id;
    `;

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤:`);
    products.forEach(product => {
      const embeddingStatus = product.has_embedding ? '‚úÖ' : '‚ùå';
      const embeddingSmallStatus = product.has_embedding_small ? '‚úÖ' : '‚ùå';
      console.log(`   üì¶ ${product.title} (Domain: ${product.hostname}, ID: ${product.domain_id})`);
      console.log(`      - embedding: ${embeddingStatus}, embedding_small: ${embeddingSmallStatus}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\nüîß === –í–ê–†–ò–ê–ù–¢–´ –¢–û–í–ê–†–û–í ===');
    
    const variants = await prisma.$queryRaw<Array<{
      id: number;
      title: string;
      product_title: string;
      domain_id: string;
      hostname: string;
      has_embedding: boolean;
      has_embedding_small: boolean;
    }>>`
      SELECT 
        pv.id,
        pv.title,
        p.title as product_title,
        p."domainId" as domain_id,
        d.hostname,
        (pv.embedding IS NOT NULL) as has_embedding,
        (pv.embedding_small IS NOT NULL) as has_embedding_small
      FROM "ProductVariant" pv
      JOIN "Product" p ON p.id = pv."productId"
      JOIN "Domain" d ON d.id = p."domainId"
      ORDER BY pv.id;
    `;

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`);
    variants.forEach(variant => {
      const embeddingStatus = variant.has_embedding ? '‚úÖ' : '‚ùå';
      const embeddingSmallStatus = variant.has_embedding_small ? '‚úÖ' : '‚ùå';
      console.log(`   üîß ${variant.product_title} ${variant.title} (Domain: ${variant.hostname})`);
      console.log(`      - embedding: ${embeddingStatus}, embedding_small: ${embeddingSmallStatus}`);
    });

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º domainId
    if (domains.length > 0) {
      const firstDomain = domains[0];
      console.log(`\nüîç === –¢–ï–°–¢ –ü–û–ò–°–ö–ê (Domain: ${firstDomain.hostname}, ID: ${firstDomain.id}) ===`);
      
      const testQuery = 'iPhone';
      console.log(`–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${testQuery}"`);
      
      // –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞
      const testResults = await prisma.$queryRaw<Array<{
        id: number;
        title: string;
        distance: number;
      }>>`
        SELECT 
          p.id,
          p.title,
          CASE 
            WHEN p.embedding_small IS NOT NULL THEN 0.5
            ELSE 1.0
          END as distance
        FROM "Product" p
        WHERE p."domainId" = ${firstDomain.id}
        ORDER BY distance
        LIMIT 5;
      `;

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${testResults.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞ ${firstDomain.hostname}:`);
      testResults.forEach(result => {
        console.log(`   - ${result.title} (distance: ${result.distance})`);
      });
    }

    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');
    
    if (domains.length === 0) {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('   –†–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ seeder');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: ${domains.length}`);
      const domainWithProducts = domains.find(d => d._count.products > 0);
      if (domainWithProducts) {
        console.log(`üì¶ –î–æ–º–µ–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏: ${domainWithProducts.hostname} (ID: ${domainWithProducts.id})`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ domainId: "${domainWithProducts.id}" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
      } else {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞: —É –¥–æ–º–µ–Ω–æ–≤ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDomainData(); 