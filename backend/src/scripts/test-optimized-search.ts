import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import { semanticSearchService } from '../services/semantic-search.service';
import openaiService from '../services/openai.service';

async function testOptimizedSearch() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å HNSW –∏–Ω–¥–µ–∫—Å–∞–º–∏...\n');

  try {
    // 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('‚öôÔ∏è === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===');
    console.log(`ü§ñ –ú–æ–¥–µ–ª—å embeddings: ${openaiService.getEmbeddingModel()}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${openaiService.getEmbeddingDimensions()}`);
    console.log(`üîç –ò–Ω–¥–µ–∫—Å—ã: HNSW –¥–ª—è embedding_small\n`);

    // 2. –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const testQueries = [
      'iPhone',
      '–∞–π—Ñ–æ–Ω',
      'iPhone —á–µ—Ä–Ω—ã–π 256',
      '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256–≥–±',
      '–∫–æ—Ñ–µ',
      '—ç—Å–ø—Ä–µ—Å—Å–æ',
      '–∫–æ—Ñ–µ –ª–∞—Ç—Ç–µ',
      '–Ω–∞—É—à–Ω–∏–∫–∏',
      'bluetooth –Ω–∞—É—à–Ω–∏–∫–∏',
      '–∫–Ω–∏–≥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–∫—Ä—É–∂–∫–∞'
    ];

    console.log('üìã === –¢–ï–°–¢–û–í–´–ï –ó–ê–ü–†–û–°–´ ===');

    for (const query of testQueries) {
      console.log(`\nüîç –ó–∞–ø—Ä–æ—Å: "${query}"`);
      
      // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
      const startTime = Date.now();
      const results = await semanticSearchService.searchProducts(query, 'localhost', 5);
      const searchTime = Date.now() - startTime;
      
      console.log(`‚ö° –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${searchTime}ms`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
      
      if (results.length > 0) {
        console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        results.forEach((result, index) => {
          const similarity = (result.similarity * 100).toFixed(1);
          const price = result.price ? ` - ${result.price}‚ÇΩ` : '';
          const type = result.type === 'variant' ? ' [–≤–∞—Ä–∏–∞–Ω—Ç]' : ' [—Ç–æ–≤–∞—Ä]';
          console.log(`   ${index + 1}. ${result.title}${price} (${similarity}%)${type}`);
        });
      } else {
        console.log('   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }

    // 3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    console.log('\n‚ö° === –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    
    const performanceQueries = ['iPhone', '–∫–æ—Ñ–µ', '–Ω–∞—É—à–Ω–∏–∫–∏'];
    const iterations = 10;
    
    for (const query of performanceQueries) {
      console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º "${query}" (${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π):`);
      
      const times: number[] = [];
      
      for (let i = 0; i < iterations; i++) {
        const start = Date.now();
        await semanticSearchService.searchProducts(query, 'localhost', 5);
        const end = Date.now();
        times.push(end - start);
      }
      
      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
      const minTime = Math.min(...times);
      const maxTime = Math.max(...times);
      
      console.log(`   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(1)}ms`);
      console.log(`   üöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${minTime}ms`);
      console.log(`   üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${maxTime}ms`);
      console.log(`   üìà –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞: ${times.join(', ')}ms`);
    }

    // 4. –¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüéØ === –¢–ï–°–¢ –°–ü–ï–¶–ò–§–ò–ß–ù–û–°–¢–ò ===');
    
    const specificityTests = [
      {
        query: '–∞–π—Ñ–æ–Ω',
        expectation: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã iPhone'
      },
      {
        query: '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π',
        expectation: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–µ iPhone'
      },
      {
        query: '–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256',
        expectation: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç'
      },
      {
        query: 'iPhone 15 256GB Black',
        expectation: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç'
      }
    ];

    for (const test of specificityTests) {
      console.log(`\nüîç –ó–∞–ø—Ä–æ—Å: "${test.query}"`);
      console.log(`üéØ –û–∂–∏–¥–∞–Ω–∏–µ: ${test.expectation}`);
      
      const results = await semanticSearchService.searchProducts(test.query, 'localhost', 5);
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
      if (results.length > 0) {
        results.forEach((result, index) => {
          const similarity = (result.similarity * 100).toFixed(1);
          const type = result.type === 'variant' ? ' [–≤–∞—Ä–∏–∞–Ω—Ç]' : ' [—Ç–æ–≤–∞—Ä]';
          console.log(`   ${index + 1}. ${result.title} (${similarity}%)${type}`);
        });
      }
    }

    // 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞
    console.log('\nü§ñ === –¢–ï–°–¢ –û–¢–í–ï–¢–û–í –ë–û–¢–ê ===');
    
    const botTestQueries = ['–∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256', '–∫–æ—Ñ–µ', '–Ω–∞—É—à–Ω–∏–∫–∏ bluetooth'];
    
    for (const query of botTestQueries) {
      console.log(`\nüîç –ó–∞–ø—Ä–æ—Å: "${query}"`);
      
      const results = await semanticSearchService.searchProducts(query, 'localhost', 5);
      const response = await semanticSearchService.generateBotResponse(query, results);
      
      console.log('ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:');
      console.log(`   "${response}"`);
    }

    console.log('\nüéâ === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log('‚úÖ –ü–æ–∏—Å–∫ —Å HNSW –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞');
    console.log('üéØ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    console.log('ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testOptimizedSearch(); 