import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function cleanupOldEmbeddings() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö embedding –∫–æ–ª–æ–Ω–æ–∫ (3072 –∏–∑–º–µ—Ä–µ–Ω–∏–π)...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ embedding_small –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    console.log('üìä === –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• ===');
    
    const productStats = await prisma.$queryRaw<Array<{
      total: bigint;
      with_embedding: bigint;
      with_embedding_small: bigint;
    }>>`
      SELECT 
        COUNT(*) as total,
        COUNT(embedding) as with_embedding,
        COUNT(embedding_small) as with_embedding_small
      FROM "Product";
    `;

    const variantStats = await prisma.$queryRaw<Array<{
      total: bigint;
      with_embedding: bigint;
      with_embedding_small: bigint;
    }>>`
      SELECT 
        COUNT(*) as total,
        COUNT(embedding) as with_embedding,
        COUNT(embedding_small) as with_embedding_small
      FROM "ProductVariant";
    `;

    console.log('üì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:');
    console.log(`   –í—Å–µ–≥–æ: ${productStats[0].total}`);
    console.log(`   –° embedding (3072): ${productStats[0].with_embedding}`);
    console.log(`   –° embedding_small (1536): ${productStats[0].with_embedding_small}`);

    console.log('\nüîß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:');
    console.log(`   –í—Å–µ–≥–æ: ${variantStats[0].total}`);
    console.log(`   –° embedding (3072): ${variantStats[0].with_embedding}`);
    console.log(`   –° embedding_small (1536): ${variantStats[0].with_embedding_small}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —É–¥–∞–ª–µ–Ω–∏—é
    const productsReady = Number(productStats[0].total) === Number(productStats[0].with_embedding_small);
    const variantsReady = Number(variantStats[0].total) === Number(variantStats[0].with_embedding_small);

    console.log('\nüîç === –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –û–ß–ò–°–¢–ö–ï ===');
    console.log(`–¢–æ–≤–∞—Ä—ã –≥–æ—Ç–æ–≤—ã: ${productsReady ? '‚úÖ' : '‚ùå'}`);
    console.log(`–í–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã: ${variantsReady ? '‚úÖ' : '‚ùå'}`);

    if (!productsReady || !variantsReady) {
      console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ embedding_small —Å–æ–∑–¥–∞–Ω—ã!');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é embeddings –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π.');
      return;
    }

    // 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('\nüóëÔ∏è === –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –ò–ù–î–ï–ö–°–û–í ===');
    
    try {
      await prisma.$queryRaw`
        DROP INDEX IF EXISTS idx_product_embedding_cosine;
      `;
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω –∏–Ω–¥–µ–∫—Å idx_product_embedding_cosine');
    } catch (error: any) {
      console.log(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å idx_product_embedding_cosine: ${error.message}`);
    }

    try {
      await prisma.$queryRaw`
        DROP INDEX IF EXISTS idx_variant_embedding_cosine;
      `;
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω –∏–Ω–¥–µ–∫—Å idx_variant_embedding_cosine');
    } catch (error: any) {
      console.log(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å idx_variant_embedding_cosine: ${error.message}`);
    }

    // 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüóëÔ∏è === –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –ö–û–õ–û–ù–û–ö ===');
    
    try {
      await prisma.$queryRaw`
        ALTER TABLE "Product" DROP COLUMN IF EXISTS embedding;
      `;
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ Product.embedding (3072 –∏–∑–º–µ—Ä–µ–Ω–∏–π)');
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Product.embedding: ${error.message}`);
    }

    try {
      await prisma.$queryRaw`
        ALTER TABLE "ProductVariant" DROP COLUMN IF EXISTS embedding;
      `;
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ProductVariant.embedding (3072 –∏–∑–º–µ—Ä–µ–Ω–∏–π)');
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ProductVariant.embedding: ${error.message}`);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===');
    
    const finalStats = await prisma.$queryRaw<Array<{
      total_products: bigint;
      total_variants: bigint;
      products_with_embedding_small: bigint;
      variants_with_embedding_small: bigint;
    }>>`
      SELECT 
        (SELECT COUNT(*) FROM "Product") as total_products,
        (SELECT COUNT(*) FROM "ProductVariant") as total_variants,
        (SELECT COUNT(embedding_small) FROM "Product") as products_with_embedding_small,
        (SELECT COUNT(embedding_small) FROM "ProductVariant") as variants_with_embedding_small;
    `;

    const stats = finalStats[0];
    console.log(`üì¶ –¢–æ–≤–∞—Ä—ã: ${stats.total_products} (embedding_small: ${stats.products_with_embedding_small})`);
    console.log(`üîß –í–∞—Ä–∏–∞–Ω—Ç—ã: ${stats.total_variants} (embedding_small: ${stats.variants_with_embedding_small})`);

    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ Prisma schema
    console.log('\nüí° === –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò ===');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ prisma/schema.prisma:');
    console.log('   - –£–¥–∞–ª–∏—Ç–µ –ø–æ–ª—è embedding –∏–∑ Product –∏ ProductVariant');
    console.log('   - –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ embedding_small –≤ embedding');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx prisma generate');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è embedding');

    console.log('\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ text-embedding-3-small');
    console.log('‚ö° HNSW –∏–Ω–¥–µ–∫—Å—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫');
    console.log('üéØ –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupOldEmbeddings(); 