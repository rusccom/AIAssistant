import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';

async function analyzeIndexLimits() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ pgvector...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    console.log('üìä === –®–ê–ì 1: –î–û–°–¢–£–ü–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–î–ï–ö–°–ê–¶–ò–ò ===');
    
    const indexMethods = await prisma.$queryRaw<Array<{ amname: string }>>`
      SELECT amname 
      FROM pg_am 
      WHERE amname IN ('ivfflat', 'hnsw', 'btree', 'gin', 'gist');
    `;
    
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:');
    indexMethods.forEach(method => {
      console.log(`   ‚úÖ ${method.amname}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    console.log('\nüìè === –®–ê–ì 2: –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ù–û–°–¢–ò ===');
    
    console.log('üî¢ –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è pgvector:');
    console.log('   üìå IVFFlat: –º–∞–∫—Å–∏–º—É–º 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π');
    console.log('   üìå HNSW: –º–∞–∫—Å–∏–º—É–º 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π');
    console.log('   üìå –ù–∞—à–∏ embeddings: 3072 –∏–∑–º–µ—Ä–µ–Ω–∏—è (text-embedding-3-large)');
    console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: 3072 > 2000 = –Ω–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤!');

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏
    console.log('\nüß™ === –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ò–ù–î–ï–ö–°–û–í ===');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    await prisma.$queryRaw`
      CREATE TABLE IF NOT EXISTS test_vectors (
        id SERIAL PRIMARY KEY,
        vec_1536 vector(1536),
        vec_2000 vector(2000),
        vec_3072 vector(3072)
      );
    `;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');

    // –¢–µ—Å—Ç 1: 1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π (text-embedding-3-small)
    try {
      await prisma.$queryRaw`
        CREATE INDEX IF NOT EXISTS test_idx_1536_hnsw 
        ON test_vectors USING hnsw (vec_1536 vector_cosine_ops);
      `;
      console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è 1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π: –£–°–ü–ï–®–ù–û');
    } catch (error: any) {
      console.log(`‚ùå HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è 1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π: ${error.message}`);
    }

    // –¢–µ—Å—Ç 2: 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π (–≥—Ä–∞–Ω–∏—Ü–∞)
    try {
      await prisma.$queryRaw`
        CREATE INDEX IF NOT EXISTS test_idx_2000_hnsw 
        ON test_vectors USING hnsw (vec_2000 vector_cosine_ops);
      `;
      console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π: –£–°–ü–ï–®–ù–û');
    } catch (error: any) {
      console.log(`‚ùå HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π: ${error.message}`);
    }

    // –¢–µ—Å—Ç 3: 3072 –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞—à–∏ —Ç–µ–∫—É—â–∏–µ)
    try {
      await prisma.$queryRaw`
        CREATE INDEX IF NOT EXISTS test_idx_3072_hnsw 
        ON test_vectors USING hnsw (vec_3072 vector_cosine_ops);
      `;
      console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è 3072 –∏–∑–º–µ—Ä–µ–Ω–∏–π: –£–°–ü–ï–®–ù–û');
    } catch (error: any) {
      console.log(`‚ùå HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è 3072 –∏–∑–º–µ—Ä–µ–Ω–∏–π: ${error.message}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é pgvector
    console.log('\nüì¶ === –®–ê–ì 4: –í–ï–†–°–ò–Ø PGVECTOR ===');
    
    try {
      const extensions = await prisma.$queryRaw<Array<{ extname: string; extversion: string }>>`
        SELECT extname, extversion 
        FROM pg_extension 
        WHERE extname = 'vector';
      `;
      
      if (extensions.length > 0) {
        console.log(`pgvector –≤–µ—Ä—Å–∏—è: ${extensions[0].extversion}`);
        
        // –í–µ—Ä—Å–∏–∏ –∏ –∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        const version = extensions[0].extversion;
        if (version.startsWith('0.4') || version.startsWith('0.5')) {
          console.log('üìã –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:');
          console.log('   - IVFFlat: –¥–æ 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π');
          console.log('   - HNSW: –¥–æ 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π');
        } else if (version.startsWith('0.6') || version.startsWith('0.7')) {
          console.log('üìã –í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö:');
          console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤');
        }
      }
    } catch (error: any) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é: ${error.message}`);
    }

    // 5. –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n‚ö° === –®–ê–ì 5: –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    
    const productCount = await prisma.$queryRaw<Array<{ count: bigint }>>`
      SELECT COUNT(*) as count FROM "Product" WHERE embedding IS NOT NULL;
    `;
    
    const variantCount = await prisma.$queryRaw<Array<{ count: bigint }>>`
      SELECT COUNT(*) as count FROM "ProductVariant" WHERE embedding IS NOT NULL;
    `;

    const totalRecords = Number(productCount[0].count) + Number(variantCount[0].count);
    console.log(`üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: ${totalRecords} –∑–∞–ø–∏—Å–µ–π —Å embeddings`);
    console.log(`‚ö° –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ~620ms (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤)`);
    
    // –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const projections = [1000, 10000, 100000];
    console.log('\nüìà –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤:');
    projections.forEach(records => {
      const estimatedTime = Math.round((620 * records) / totalRecords);
      console.log(`   ${records.toLocaleString()} –∑–∞–ø–∏—Å–µ–π: ~${estimatedTime}ms`);
    });

    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é
    console.log('\nüí° === –®–ê–ì 6: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');
    
    console.log('üéØ –í–ê–†–ò–ê–ù–¢–´ –†–ï–®–ï–ù–ò–Ø:');
    console.log('');
    console.log('1Ô∏è‚É£ –ü–ï–†–ï–•–û–î –ù–ê text-embedding-3-small (1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π):');
    console.log('   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HNSW/IVFFlat –∏–Ω–¥–µ–∫—Å—ã');
    console.log('   ‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏');
    console.log('   ‚ùå –ß—É—Ç—å –º–µ–Ω—å—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å embeddings');
    console.log('   üí∞ –î–µ—à–µ–≤–ª–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenAI API');
    console.log('');
    console.log('2Ô∏è‚É£ REDUCTION/PCA –¥–æ 2000 –∏–∑–º–µ—Ä–µ–Ω–∏–π:');
    console.log('   ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    console.log('   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã');
    console.log('   ‚ùå –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏');
    console.log('   ‚ùå –ü–æ—Ç–µ—Ä—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏');
    console.log('');
    console.log('3Ô∏è‚É£ –ü–†–û–î–û–õ–ñ–ò–¢–¨ –ë–ï–ó –ò–ù–î–ï–ö–°–û–í:');
    console.log('   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å');
    console.log('   ‚úÖ –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏');
    console.log('   ‚ùå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚ùå –ù–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è');

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    await prisma.$queryRaw`DROP TABLE IF EXISTS test_vectors;`;
    console.log('\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeIndexLimits(); 