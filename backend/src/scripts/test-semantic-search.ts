#!/usr/bin/env ts-node

import { semanticSearchService } from '../services/semantic-search.service';

async function testSemanticSearch() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...\n');

    const testQueries = [
        // –†—É—Å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256?',
        '–ö–∞–∫–∞—è —Ü–µ–Ω–∞ –∫—Ä—É–∂–∫–∏?',
        '–ü–æ–∫–∞–∂–∏ —Ü–µ–Ω—É —ç—Å–ø—Ä–µ—Å—Å–æ',
        '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω apple –±–æ–ª—å—à–æ–π',
        '–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–ù–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –±–µ–ª—ã–µ',
        
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        'iPhone black 256GB price',
        'ceramic mug cost',
        'coffee espresso price',
        'programming book cost',
        'bluetooth headphones white',
        
        // –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        '–∞–π—Ñ–æ–Ω —Å–∏–Ω–∏–π –ø–∞–º—è—Ç—å 128',
        '–∫–∞–ø—É—á–∏–Ω–æ –∫–æ—Ñ–µ',
        '–Ω–∞—É—à–Ω–∏–∫–∏ —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞'
    ];

    const hostname = 'localhost'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–æ–º–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    for (const query of testQueries) {
        console.log(`üîç –ó–∞–ø—Ä–æ—Å: "${query}"`);
        
        try {
            const result = await semanticSearchService.searchProductsForBot(query, hostname);
            
            if (result.products.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.products.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤)`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${result.response}"`);
                console.log(`üîß –¢–∏–ø –ø–æ–∏—Å–∫–∞: ${result.searchType}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏
                result.products.slice(0, 2).forEach((product, index) => {
                    console.log(`   ${index + 1}. ${product.productTitle} ${product.variantTitle} - ${product.price / 100}$ (similarity: ${product.similarity.toFixed(3)})`);
                });
            } else {
                console.log(`‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${result.response}"`);
            }
            
        } catch (error) {
            console.error(`üí• –û—à–∏–±–∫–∞: ${error}`);
        }
        
        console.log('‚îÄ'.repeat(80) + '\n');
    }
}

if (require.main === module) {
    testSemanticSearch().catch(console.error);
} 