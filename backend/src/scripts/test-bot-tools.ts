#!/usr/bin/env ts-node

const BASE_URL = 'http://localhost:3000';
const HOSTNAME = 'localhost';

async function makeRequest(url: string, data: any) {
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    });
    
    const result = await response.json();
    return { status: response.status, data: result };
}

async function testBotToolsAPI() {
    console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º Bot Tools API –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...\n');

    const testQueries = [
        '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞–π—Ñ–æ–Ω —á–µ—Ä–Ω—ã–π 256?',
        '–ö–∞–∫–∞—è —Ü–µ–Ω–∞ –∫—Ä—É–∂–∫–∏?',
        '–ü–æ–∫–∞–∂–∏ —Ü–µ–Ω—É —ç—Å–ø—Ä–µ—Å—Å–æ',
        'iPhone black 256GB price',
        'bluetooth headphones white'
    ];

    // –¢–µ—Å—Ç 1: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('üîç === –¢–ï–°–¢ 1: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ ===\n');
    
    for (const query of testQueries) {
        console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${query}"`);
        
        try {
            const response = await makeRequest(`${BASE_URL}/api/bot-tools/search-products`, {
                query,
                hostname: HOSTNAME
            });

            if (response.data.success) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ ${response.data.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${response.data.response}"`);
                console.log(`üîß –¢–∏–ø –ø–æ–∏—Å–∫–∞: ${response.data.searchType}`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.data.error}`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${response.data.response}"`);
            }
        } catch (error: any) {
            console.error(`üí• HTTP –æ—à–∏–±–∫–∞: ${error.message}`);
        }
        
        console.log('‚îÄ'.repeat(80) + '\n');
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
    console.log('üì¶ === –¢–ï–°–¢ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ ===\n');
    
    const productTests = [
        { productId: 1, description: '–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä' },
        { productId: 2, variantId: 1, description: '–í—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä, –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç' },
        { productId: 999, description: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä' }
    ];

    for (const test of productTests) {
        console.log(`üìù –¢–µ—Å—Ç: ${test.description} (Product ID: ${test.productId}${test.variantId ? `, Variant ID: ${test.variantId}` : ''})`);
        
        try {
            const response = await makeRequest(`${BASE_URL}/api/bot-tools/product-info`, {
                productId: test.productId,
                variantId: test.variantId,
                hostname: HOSTNAME
            });

            if (response.data.success) {
                console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ${response.data.product.title}`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${response.data.response}"`);
                console.log(`üí∞ –¶–µ–Ω–∞: $${(response.data.product.variant.price / 100).toFixed(2)}`);
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.data.error}`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: "${response.data.response}"`);
            }
        } catch (error: any) {
            console.error(`üí• HTTP –æ—à–∏–±–∫–∞: ${error.message}`);
        }
        
        console.log('‚îÄ'.repeat(80) + '\n');
    }

    // –¢–µ—Å—Ç 3: Legacy API (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫)
    console.log('üîß === –¢–ï–°–¢ 3: Legacy API (—Ç–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫) ===\n');
    
    const legacyTests = [
        { item: '–∞–π—Ñ–æ–Ω', hostname: HOSTNAME, description: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ iPhone' },
        { item: '–∫—Ä—É–∂–∫–∞', hostname: HOSTNAME, description: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫—Ä—É–∂–∫–∏' },
        { item: 'bluetooth –Ω–∞—É—à–Ω–∏–∫–∏', hostname: HOSTNAME, description: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞—É—à–Ω–∏–∫–æ–≤' },
        { item: '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä', hostname: HOSTNAME, description: '–¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç' },
        { item: '–∫–æ—Ñ–µ', description: '–ë–µ–∑ hostname (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)' },
    ];

    for (const test of legacyTests) {
        console.log(`üìù –¢–µ—Å—Ç: ${test.description} - "${test.item}"`);
        
        try {
            const payload: any = { item: test.item };
            if (test.hostname) {
                payload.hostname = test.hostname;
            }

            const response = await makeRequest(`${BASE_URL}/api/bot-tools/get-price`, payload);
            
            console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω`);
            console.log(`üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: "${response.data.response}"`);
            
        } catch (error: any) {
            console.error(`üí• HTTP –æ—à–∏–±–∫–∞: ${error.message}`);
        }
        
        console.log('‚îÄ'.repeat(80) + '\n');
    }

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bot Tools API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

if (require.main === module) {
    testBotToolsAPI().catch(console.error);
} 