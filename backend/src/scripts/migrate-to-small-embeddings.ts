import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

import prisma from '../db/prisma';
import openaiService from '../services/openai.service';

async function migrateToSmallEmbeddings() {
  console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ text-embedding-3-small (1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π)...\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö embeddings
    console.log('üìä === –®–ê–ì 1: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–´–• –ö–û–õ–û–ù–û–ö ===');
    
    try {
      await prisma.$queryRaw`
        ALTER TABLE "Product" ADD COLUMN embedding_small vector(1536);
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ Product.embedding_small');
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ Product.embedding_small —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }

    try {
      await prisma.$queryRaw`
        ALTER TABLE "ProductVariant" ADD COLUMN embedding_small vector(1536);
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ProductVariant.embedding_small');
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ ProductVariant.embedding_small —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\nüîÑ === –®–ê–ì 2: –û–ë–ù–û–í–õ–ï–ù–ò–ï EMBEDDINGS ===');
    
    const products = await prisma.$queryRaw<Array<{
      id: number;
      title: string;
      description: string | null;
    }>>`
      SELECT id, title, description
      FROM "Product"
      WHERE embedding_small IS NULL;
    `;

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    // –û–±–Ω–æ–≤–ª—è–µ–º embeddings –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    for (const product of products) {
      const text = `${product.title} ${product.description || ''}`.trim();
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º text-embedding-3-small –≤–º–µ—Å—Ç–æ text-embedding-3-large
        const response = await openaiService.getClient().embeddings.create({
          model: 'text-embedding-3-small', // 1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π
          input: text,
          encoding_format: 'float'
        });
        
        const embedding = response.data[0].embedding;
        const embeddingVector = '[' + embedding.join(',') + ']';
        
        await prisma.$queryRaw`
          UPDATE "Product" 
          SET embedding_small = ${embeddingVector}::vector 
          WHERE id = ${product.id};
        `;
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω embedding –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${product.title}`);
      } catch (error: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.title}: ${error.message}`);
      }
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const variants = await prisma.$queryRaw<Array<{
      id: number;
      title: string;
      product_id: number;
      product_title: string;
      product_description: string | null;
    }>>`
      SELECT 
        pv.id,
        pv.title,
        p.id as product_id,
        p.title as product_title,
        p.description as product_description
      FROM "ProductVariant" pv
      JOIN "Product" p ON p.id = pv."productId"
      WHERE pv.embedding_small IS NULL;
    `;

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    // –û–±–Ω–æ–≤–ª—è–µ–º embeddings –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    for (const variant of variants) {
      const text = `${variant.product_title} ${variant.title} ${variant.product_description || ''}`.trim();
      
      try {
        const response = await openaiService.getClient().embeddings.create({
          model: 'text-embedding-3-small', // 1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π
          input: text,
          encoding_format: 'float'
        });
        
        const embedding = response.data[0].embedding;
        const embeddingVector = '[' + embedding.join(',') + ']';
        
        await prisma.$queryRaw`
          UPDATE "ProductVariant" 
          SET embedding_small = ${embeddingVector}::vector 
          WHERE id = ${variant.id};
        `;
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω embedding –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${variant.product_title} ${variant.title}`);
      } catch (error: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${variant.title}: ${error.message}`);
      }
    }

    // 4. –°–æ–∑–¥–∞–µ–º HNSW –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    console.log('\nüèóÔ∏è === –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í ===');
    
    try {
      await prisma.$queryRaw`
        CREATE INDEX IF NOT EXISTS idx_product_embedding_small_hnsw 
        ON "Product" USING hnsw (embedding_small vector_cosine_ops);
      `;
      console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è Product.embedding_small —Å–æ–∑–¥–∞–Ω');
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ Product: ${error.message}`);
    }

    try {
      await prisma.$queryRaw`
        CREATE INDEX IF NOT EXISTS idx_variant_embedding_small_hnsw 
        ON "ProductVariant" USING hnsw (embedding_small vector_cosine_ops);
      `;
      console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å –¥–ª—è ProductVariant.embedding_small —Å–æ–∑–¥–∞–Ω');
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ ProductVariant: ${error.message}`);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    console.log('\n‚ö° === –®–ê–ì 4: –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä 1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    const testResponse = await openaiService.getClient().embeddings.create({
      model: 'text-embedding-3-small',
      input: 'iPhone test query',
      encoding_format: 'float'
    });
    
    const testVector = '[' + testResponse.data[0].embedding.join(',') + ']';
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    const iterations = 5;
    const times: number[] = [];
    
    for (let i = 0; i < iterations; i++) {
      const start = Date.now();
      
      await prisma.$queryRaw`
        SELECT 
          id,
          title,
          (embedding_small <=> ${testVector}::vector) as distance
        FROM "Product"
        WHERE embedding_small IS NOT NULL
        ORDER BY embedding_small <=> ${testVector}::vector
        LIMIT 5;
      `;
      
      const end = Date.now();
      times.push(end - start);
    }
    
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    console.log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏: ${avgTime.toFixed(1)}ms`);
    console.log(`üìä –í—Ä–µ–º–µ–Ω–∞: ${times.join(', ')}ms`);

    // 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüéØ === –®–ê–ì 5: –°–†–ê–í–ù–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê ===');
    
    const testQueries = ['iPhone', '–∫–æ—Ñ–µ', '–Ω–∞—É—à–Ω–∏–∫–∏'];
    
    for (const query of testQueries) {
      console.log(`\nüîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${query}"`);
      
      // –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const queryResponse = await openaiService.getClient().embeddings.create({
        model: 'text-embedding-3-small',
        input: query,
        encoding_format: 'float'
      });
      
      const queryVector = '[' + queryResponse.data[0].embedding.join(',') + ']';
      
      // –ü–æ–∏—Å–∫ —Å –Ω–æ–≤—ã–º–∏ embeddings
      const smallResults = await prisma.$queryRaw<Array<{
        title: string;
        distance: number;
      }>>`
        SELECT 
          title,
          (embedding_small <=> ${queryVector}::vector) as distance
        FROM "Product"
        WHERE embedding_small IS NOT NULL
        ORDER BY embedding_small <=> ${queryVector}::vector
        LIMIT 3;
      `;
      
      console.log('   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å text-embedding-3-small:');
      smallResults.forEach((result, idx) => {
        const similarity = (1 - result.distance) * 100;
        console.log(`      ${idx + 1}. ${result.title} (${similarity.toFixed(1)}%)`);
      });
    }

    console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! üéâ');
    console.log('');
    console.log('üí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ openai.service.ts –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è text-embedding-3-small');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ semantic-search.service.ts –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è embedding_small');
    console.log('3. –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ embedding –∫–æ–ª–æ–Ω–∫–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

migrateToSmallEmbeddings(); 