import prisma from '../db/prisma';

export const getCartInfoFunction = {
  type: 'function' as const,
  function: {
    name: 'get_cart_info',
    description: 'Show shopping cart contents and total. Use when user asks about cart, wants to see what\'s in cart, or asks for total.',
    parameters: {
      type: 'object' as const,
      properties: {},
      required: [] as const
    }
  }
};

interface CartItemInfo {
  id: number;
  variantId: number;
  quantity: number;
  productTitle: string;
  variantTitle: string;
  price: number;
  totalPrice: number;
  sku?: string;
}

interface GetCartInfoSuccess {
  success: true;
  response: string;
  cart: {
    id: string;
    totalItems: number;
    totalAmount: number;
    items: CartItemInfo[];
  };
}

interface GetCartInfoFailure {
  success: false;
  response: string;
  error: string;
  hostname?: string;
}

type GetCartInfoResult = GetCartInfoSuccess | GetCartInfoFailure;

export async function getCartInfo(args: { hostname?: string }): Promise<GetCartInfoResult> {
  const { hostname = 'localhost' } = args;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–µ–Ω
    const domain = await prisma.domain.findUnique({
      where: { hostname }
    });

    if (!domain) {
      return {
        success: false,
        response: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        error: 'DOMAIN_NOT_FOUND',
        hostname
      };
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤ –±–∞–∑–µ)
    const user = await prisma.user.findFirst();
    if (!user) {
      return {
        success: false,
        response: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.',
        error: 'USER_NOT_FOUND',
        hostname
      };
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞
    const cart = await prisma.cart.findUnique({
      where: {
        userId_domainId: {
          userId: user.id,
          domainId: domain.id
        }
      },
      include: {
        items: {
          include: {
            variant: {
              include: {
                product: true
              }
            }
          }
        }
      }
    });

    if (!cart || cart.items.length === 0) {
      return {
        success: true,
        response: '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.',
        cart: {
          id: cart?.id || '',
          totalItems: 0,
          totalAmount: 0,
          items: []
        }
      };
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    const totalItems = cart.items.reduce((sum, item) => sum + item.quantity, 0);
    const totalAmount = cart.items.reduce((sum, item) => sum + (item.variant.price * item.quantity), 0);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    const cartItems: CartItemInfo[] = cart.items.map(item => ({
      id: item.id,
      variantId: item.variantId,
      quantity: item.quantity,
      productTitle: item.variant.product.title,
      variantTitle: item.variant.title,
      price: item.variant.price,
      totalPrice: item.variant.price * item.quantity,
      sku: item.variant.sku || undefined
    }));

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    const formatPrice = (priceInCents: number) => {
      return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
      }).format(priceInCents / 100);
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
    let response = `üõí –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ ${totalItems} —Ç–æ–≤–∞—Ä(–æ–≤) –Ω–∞ —Å—É–º–º—É ${formatPrice(totalAmount)}:\n\n`;
    
    cart.items.forEach((item, index) => {
      const itemTotal = item.variant.price * item.quantity;
      const sku = item.variant.sku ? ` (${item.variant.sku})` : '';
      response += `${index + 1}. ${item.variant.product.title} ${item.variant.title}${sku}\n`;
      response += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç. √ó ${formatPrice(item.variant.price)} = ${formatPrice(itemTotal)}\n\n`;
    });

    response += `üí∞ –ò—Ç–æ–≥–æ: ${formatPrice(totalAmount)}`;

    console.log(`‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞: ${totalItems} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É ${formatPrice(totalAmount)}`);

    return {
      success: true,
      response,
      cart: {
        id: cart.id,
        totalItems,
        totalAmount,
        items: cartItems
      }
    };

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
    
    return {
      success: false,
      response: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      error: error.message || 'Unknown error',
      hostname
    };
  }
} 