import { semanticSearchService } from '../services/semantic-search.service';

export const searchProductsFunction = {
  type: 'function' as const,
  function: {
    name: 'search_products',
    description: 'Searches products and returns items with price and availability when purchase intent is detected: product/category mention or questions about price/availability/assortment (incl. colloquial queries like ‚Äòwhat hot items do you have?‚Äô).',
    parameters: {
      type: 'object' as const,
      properties: {
        query: {
          type: 'string' as const,
          description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫, RU/EN).'
        }
      },
      required: ['query'] as const
    }
  }
};

interface SearchProductsSuccess {
  success: true;
  response: string;
  products: Array<{
    id: number;
    title: string;
    price?: number;
    sku?: string;
    type: 'product' | 'variant';
    similarity: number;
  }>;
}

interface SearchProductsFailure {
  success: false;
  response: string;
  error: string;
}

type SearchProductsResult = SearchProductsSuccess | SearchProductsFailure;

export async function executeSearchProducts(args: { query: string; hostname?: string }): Promise<SearchProductsResult> {
  const { query, hostname = 'localhost' } = args;
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤: "${query}" –¥–ª—è –¥–æ–º–µ–Ω–∞: ${hostname}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º hostname –Ω–∞–ø—Ä—è–º—É—é –≤ semantic search
    const results = await semanticSearchService.searchProducts(query, hostname, 5);
    
    if (results.length === 0) {
      const response = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.`;
      
      const emptyResult = {
        success: true as const,
        response,
        products: []
      };

      console.log('\nüì§ –ß–¢–û –û–¢–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ê–°–°–ò–°–¢–ï–ù–¢–£ (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç):');
      console.log('‚ïê'.repeat(50));
      console.log(`üéØ Query: "${query}"`);
      console.log(`‚úÖ Success: ${emptyResult.success}`);
      console.log('\nüìù Response –¥–ª—è —á–∞—Ç–∞:');
      console.log(`"${response}"`);
      console.log('\nüì¶ Products array: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []');
      console.log('\nüìã –ü–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç:');
      console.log(JSON.stringify(emptyResult, null, 2));
      console.log('‚ïê'.repeat(50));
      
      return emptyResult;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –±–æ—Ç–∞
    const response = await semanticSearchService.generateBotResponse(query, results);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    const products = results.map(result => ({
      id: result.id,
      title: result.title,
      price: result.price,
      sku: result.sku,
      type: result.type,
      similarity: result.similarity
    }));

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    const finalResult = {
      success: true as const,
      response,
      products
    };

    console.log('\nüì§ –ß–¢–û –û–¢–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ê–°–°–ò–°–¢–ï–ù–¢–£:');
    console.log('‚ïê'.repeat(50));
    console.log(`üéØ Query: "${query}"`);
    console.log(`‚úÖ Success: ${finalResult.success}`);
    console.log('\nüìù Response –¥–ª—è —á–∞—Ç–∞:');
    console.log(`"${response}"`);
    console.log(`\nüì¶ Products array (${products.length} —Ç–æ–≤–∞—Ä–æ–≤):`);
    
    products.forEach((product, i) => {
      const price = product.price ? ` | ${product.price/100}‚ÇΩ` : '';
      const sku = product.sku ? ` | SKU: ${product.sku}` : '';
      const similarity = (product.similarity * 100).toFixed(1);
      console.log(`  ${i+1}. ID:${product.id} | "${product.title}"${price}${sku} | ${similarity}% | ${product.type}`);
    });

    console.log('\nüìã –ü–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç:');
    console.log(JSON.stringify(finalResult, null, 2));
    console.log('‚ïê'.repeat(50));

    return finalResult;

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    
    const errorResult = {
      success: false as const,
      response: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      error: error.message || 'Unknown error'
    };

    console.log('\nüì§ –ß–¢–û –û–¢–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ê–°–°–ò–°–¢–ï–ù–¢–£ (–æ—à–∏–±–∫–∞):');
    console.log('‚ïê'.repeat(50));
    console.log(`üéØ Query: "${query}"`);
    console.log(`‚ùå Success: ${errorResult.success}`);
    console.log('\nüìù Response –¥–ª—è —á–∞—Ç–∞:');
    console.log(`"${errorResult.response}"`);
    console.log(`\n‚ö†Ô∏è Error: "${errorResult.error}"`);
    console.log('\nüìã –ü–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç:');
    console.log(JSON.stringify(errorResult, null, 2));
    console.log('‚ïê'.repeat(50));
    
    return errorResult;
  }
} 