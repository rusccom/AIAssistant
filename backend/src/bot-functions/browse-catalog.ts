import prisma from '../db/prisma';

export const browseCatalogFunction = {
  type: 'function' as const,
  function: {
    name: 'browse_catalog',
    description: 'Show product catalog when user asks general questions like "what do you have?", "show me your products", "what\'s available?", "browse catalog". Use this for general browsing requests.',
    parameters: {
      type: 'object' as const,
      properties: {
        action: {
          type: 'string' as const,
          description: 'Action to perform (always "browse" for catalog browsing)'
        }
      },
      required: ['action'] as const
    }
  }
};

interface ProductInfo {
  id: number;
  title: string;
  description?: string;
  variantsCount: number;
  priceRange: {
    min: number;
    max: number;
  };
  sampleVariants: Array<{
    id: number;
    title: string;
    price: number;
    sku?: string;
  }>;
}

interface BrowseCatalogSuccess {
  success: true;
  response: string;
  catalog: {
    totalProducts: number;
    featuredProducts: ProductInfo[];
    categories: string[];
  };
}

interface BrowseCatalogFailure {
  success: false;
  response: string;
  error: string;
  hostname?: string;
}

type BrowseCatalogResult = BrowseCatalogSuccess | BrowseCatalogFailure;

export async function browseCatalog(args: { 
  action: string;
  hostname?: string 
}): Promise<BrowseCatalogResult> {
  const { action, hostname = 'localhost' } = args;

  try {
    console.log(`üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞: ${hostname}`);

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–µ–Ω
    const domain = await prisma.domain.findUnique({
      where: { hostname }
    });

    if (!domain) {
      return {
        success: false,
        response: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        error: 'DOMAIN_NOT_FOUND',
        hostname
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalProducts = await prisma.product.count({
      where: {
        domainId: domain.id,
        status: 'active'
      }
    });

    if (totalProducts === 0) {
      return {
        success: true,
        response: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã!',
        catalog: {
          totalProducts: 0,
          featuredProducts: [],
          categories: []
        }
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–º —Ç–æ–ø-8 –¥–ª—è –æ–±–∑–æ—Ä–∞)
    const products = await prisma.product.findMany({
      where: {
        domainId: domain.id,
        status: 'active'
      },
      include: {
        variants: {
          orderBy: { price: 'asc' },
          take: 3 // –ë–µ—Ä–µ–º –¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 8
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    const featuredProducts: ProductInfo[] = products.map(product => {
      const prices = product.variants.map((v: any) => v.price);
      const minPrice = Math.min(...prices);
      const maxPrice = Math.max(...prices);

      return {
        id: product.id,
        title: product.title,
        description: product.description || undefined,
        variantsCount: product.variants.length,
        priceRange: {
          min: minPrice,
          max: maxPrice
        },
        sampleVariants: product.variants.slice(0, 3).map((variant: any) => ({
          id: variant.id,
          title: variant.title,
          price: variant.price,
          sku: variant.sku || undefined
        }))
      };
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    const allTitles = products.map(p => p.title.toLowerCase());
    const categories = Array.from(new Set([
      ...allTitles.filter(title => title.includes('iphone')).map(() => '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã'),
      ...allTitles.filter(title => title.includes('–∫–æ—Ñ–µ') || title.includes('–ª–∞—Ç—Ç–µ') || title.includes('—ç—Å–ø—Ä–µ—Å—Å–æ')).map(() => '–ù–∞–ø–∏—Ç–∫–∏'),
      ...allTitles.filter(title => title.includes('–∫—Ä—É–∂–∫–∞') || title.includes('—á–∞—à–∫–∞')).map(() => '–ü–æ—Å—É–¥–∞'),
      ...allTitles.filter(title => title.includes('–∫–Ω–∏–≥–∞')).map(() => '–ö–Ω–∏–≥–∏'),
      ...allTitles.filter(title => title.includes('–Ω–∞—É—à–Ω–∏–∫–∏')).map(() => '–ê—É–¥–∏–æ')
    ]));

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    const formatPrice = (priceInCents: number) => {
      return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
      }).format(priceInCents / 100);
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
    let response = `üõçÔ∏è **–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥** —Å–æ–¥–µ—Ä–∂–∏—Ç ${totalProducts} —Ç–æ–≤–∞—Ä(–æ–≤)!\n\n`;
    
    if (categories.length > 0) {
      response += `üìÇ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** ${categories.join(', ')}\n\n`;
    }

    response += `üåü **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n`;

    featuredProducts.forEach((product, index) => {
      const priceInfo = product.priceRange.min === product.priceRange.max 
        ? formatPrice(product.priceRange.min)
        : `–æ—Ç ${formatPrice(product.priceRange.min)} –¥–æ ${formatPrice(product.priceRange.max)}`;
      
      response += `${index + 1}. **${product.title}**\n`;
      if (product.description) {
        response += `   ${product.description}\n`;
      }
      response += `   üí∞ ${priceInfo}`;
      
      if (product.variantsCount > 1) {
        response += ` (${product.variantsCount} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)`;
      }
      response += '\n\n';
    });

    if (products.length === 8 && totalProducts > 8) {
      response += `*–ò –µ—â–µ ${totalProducts - 8} —Ç–æ–≤–∞—Ä–æ–≤! –°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.*`;
    }

    console.log(`‚úÖ –ü–æ–∫–∞–∑–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: ${featuredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${totalProducts}`);

    return {
      success: true,
      response,
      catalog: {
        totalProducts,
        featuredProducts,
        categories
      }
    };

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
    
    return {
      success: false,
      response: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      error: error.message || 'Unknown error',
      hostname
    };
  }
}
